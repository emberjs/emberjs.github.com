<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2017-09-01T00:00:00+00:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember 2.15 and 2.16 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/09/01/ember-2-15-released.html"/>
    <id>http://emberjs.com/blog/2017/09/01/ember-2-15-released.html</id>
    <published>2017-09-01T00:00:00+00:00</published>
    <updated>2017-09-01T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.15.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.16 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.15.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.16 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report
any bugs before they are published as a final release in six weeks&amp;#39; time. The
&lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to
continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;This release also marks the conclusion of security patch support for Ember.js
2.4-LTS. 2.4-LTS was released in April of 2016, and was the first Long-Term
Support release of Ember.js. We&amp;#39;re pleased with the impact of LTS releases on
the Ember project and look forward to continuing the practice.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-15'&gt;Changes in Ember.js 2.15&lt;/h3&gt;
&lt;p&gt;Ember.js 2.15.0 is an incremental, backwards compatible release of Ember with
bug fixes, performance improvements, and minor deprecations.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_public-router-service-phase-1'&gt;Public Router Service: Phase 1&lt;/h4&gt;
&lt;p&gt;Initial support for the public router service API
(described in &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md"&gt;RFC #95&lt;/a&gt;)
is included in this release. The effort on this feature has been split
into two phases:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 1&lt;/strong&gt; is completed in 2.15.0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement a public service named &lt;code&gt;&amp;#39;router&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Expose the &lt;code&gt;currentRouteName&lt;/code&gt;,
&lt;code&gt;currentURL&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, and &lt;code&gt;rootURL&lt;/code&gt; on the service.&lt;/li&gt;
&lt;li&gt;Additionally expose
&lt;code&gt;transitionTo&lt;/code&gt; and &lt;code&gt;replaceWith&lt;/code&gt; as methods on the service.&lt;/li&gt;
&lt;li&gt;Provide the method &lt;code&gt;urlFor&lt;/code&gt; to the service for generating URLs based on a
route name and models.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of this API would be to transition to another route from a
component:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;router&lt;/span&gt;: Ember.inject.service(),

  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    save(model) {
      model.save().then(() =&amp;gt; {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="local-variable"&gt;this&lt;/span&gt;.isDestroyed) { &lt;span class="keyword"&gt;return&lt;/span&gt;; }
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;router&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      });
    }
  }

});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more details on these APIs see the &lt;a href="https://www.emberjs.com/api/ember/2.15/classes/RouterService"&gt;RouterService API
documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phase 2&lt;/strong&gt; is pending implementation of the new public &lt;code&gt;RouteInfo&lt;/code&gt; API. It is
not included in Ember 2.15.0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expand the service with the methods &lt;code&gt;isActive&lt;/code&gt;, &lt;code&gt;recognize&lt;/code&gt;, and
&lt;code&gt;recognizeAndLoad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Deprecate the &lt;code&gt;willTransition&lt;/code&gt; and &lt;code&gt;didTransition&lt;/code&gt; router hooks (not the
route actions of the same name). Replace them with events emitted by the
router service which have improved timing and public API arguments:
&lt;code&gt;routeWillChange&lt;/code&gt; and &lt;code&gt;routeDidChange&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Addons that wish to use the router service API and support Ember releases prior to
2.15.0 should consider the
&lt;a href="https://github.com/rwjblue/ember-router-service-polyfill"&gt;ember-router-service-polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-mount-code-helper-code-model-code-argument'&gt;&lt;code&gt;{{mount}}&lt;/code&gt; helper &lt;code&gt;model&lt;/code&gt; argument&lt;/h4&gt;
&lt;p&gt;Ember 2.15.0 implements
&lt;a href="https://github.com/status200/rfcs/blob/ember-engines-mount-params/text/0000-ember-engines-mount-params.md"&gt;RFC #225&lt;/a&gt; with some minor tweaks. The &lt;code&gt;{{mount}}&lt;/code&gt;
helper, used to invoke an Ember engine, now accepts the named argument of
&lt;code&gt;model&lt;/code&gt; for an engine&amp;#39;s application controller.&lt;/p&gt;

&lt;p&gt;For example, in an application you might pass some values from a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
 &lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Application template!&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;mount&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;admin&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;model&lt;/span&gt;=&lt;span class="error"&gt;(&lt;/span&gt;&lt;span class="attribute-value"&gt;hash&lt;/span&gt;
    &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Secret Admin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="attribute-name"&gt;signInButton&lt;/span&gt;=&lt;span class="error"&gt;(&lt;/span&gt;&lt;span class="attribute-value"&gt;component&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;sign-in-button&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;
 &lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And in an engine access those values on the &lt;code&gt;model&lt;/code&gt; property:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;admin/app/templates/application.hbs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Admin area: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;model.title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  Please sign in: &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;model.signInButton&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_other-changes-in-2-15'&gt;Other changes in 2.15&lt;/h4&gt;
&lt;p&gt;Other changes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember 2.15.0 blueprints will no longer generate names for initializers and
instance initializers.&lt;/li&gt;
&lt;li&gt;The deprecated API &lt;code&gt;_lookupFactory&lt;/code&gt; has been removed in this release. See
the &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_migrating-from-_lookupfactory-to-factoryfor"&gt;deprecation
guide&lt;/a&gt;
for details about moving away from this API.&lt;/li&gt;
&lt;li&gt;The Glimmer-VM rendering engine has been updated in this release, matching
Ember&amp;#39;s rendering engine to that of the Glimmer.js library at its EmberConf
release. Included are VM improvement such as the &amp;quot;stack VM&amp;quot;, improved
assertion stripping in production builds, and a more complete Glimmer-VM
implementation of the &lt;code&gt;(component&lt;/code&gt; helper.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No new deprecations are included in Ember 2.15.0&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 2.15.0, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.15.0"&gt;Ember.js 2.15.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-16-beta'&gt;Upcoming Changes in Ember.js 2.16-beta&lt;/h3&gt;
&lt;p&gt;Ember.js 2.16-beta continues to improve the framework with minor bug fixes.
Additionally there is a major change in conventional usage coming in 2.16.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-js-modules-api'&gt;Ember.js Modules API&lt;/h4&gt;
&lt;p&gt;In Ember.js 2.16 the recommended way to access framework code in Ember
applications will be via the JavaScript modules API described in
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md"&gt;RFC #176&lt;/a&gt;. For example this basic component definition in 2.15.0:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;session&lt;/span&gt;: Ember.inject.service(),
  &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Curious Case&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would in 2.16 conventions be written as:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { inject as service } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@ember/service&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@ember/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="key"&gt;session&lt;/span&gt;: service(),
  &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Curious Case&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;JavaScript modules make the framework easier to document, make the distinction
between public and private API much easier to maintain, and provide
opportunities for performance work such as tree-shaking. Adopting a new
convention for importing the framework is a big task that impacts application
code, documentation, generators/blueprints, and more.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_updating-your-application'&gt;Updating your application&lt;/h4&gt;
&lt;p&gt;To help us test the migration path, existing applications can move to adopt
the new import style immediately. Using 2.16-beta of Ember is suggested, but
not actually required. To update an application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade ember-cli-babel to v6.8.0 or greater. This may require you to upgrade
ember-cli generally depending on your current version.&lt;/li&gt;
&lt;li&gt;Install and run the
&lt;a href="https://github.com/ember-cli/ember-modules-codemod"&gt;ember-modules-codemod&lt;/a&gt;.
This command will migrate legacy code that imports the &lt;code&gt;&amp;#39;ember&amp;#39;&lt;/code&gt; package to
the new modules, updating files in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install ember-modules-codemod -g
cd my-ember-app
ember-modules-codemod
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;re using the new import API!&lt;/p&gt;

&lt;p&gt;Many applications use the
&lt;a href="https://github.com/ember-cli/ember-cli-shims"&gt;ember-cli-shims&lt;/a&gt;
package. This provides the module for &lt;code&gt;import Ember from &amp;#39;ember&amp;#39;&lt;/code&gt;. It also
provides an earlier design of Ember&amp;#39;s module API. This package continues
to work, however in 2.16 it will no longer be a dependency for new
Ember applications.&lt;/p&gt;

&lt;p&gt;The
&lt;a href="https://github.com/ember-cli/eslint-plugin-ember"&gt;eslint-plugin-ember&lt;/a&gt;
package provides a linting rule that can remove usage of the legacy modules
provided by ember-cli-shims.
To run this follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install eslint-plugin-ember v4.3.0 or greater as a dev dependency for your
application.&lt;/li&gt;
&lt;li&gt;Follow the eslint-plugin-ember
&lt;a href="https://github.com/ember-cli/eslint-plugin-ember#-usage"&gt;usage instructions&lt;/a&gt;
and update your &lt;code&gt;.eslintrc.js&lt;/code&gt; appropriately.
For more detailed instructions, see this excellent blog post:
&lt;a href="https://medium.com/@Dhaulagiri/embers-javascript-modules-api-b4483782f329"&gt;How To Use Ember’s New Module Import Syntax Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./node_modules/.bin/eslint --fix&lt;/code&gt; to convert ember-cli-shims module usage to plain &lt;code&gt;&amp;#39;ember&amp;#39;&lt;/code&gt;
imports.&lt;/li&gt;
&lt;li&gt;Run the ember-modules-codemod as described above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By trying these migration steps on your applications, you can provide valuable
feeback to improve the final process announced with 2.16.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_preparing-your-addon-for-2-16'&gt;Preparing your Addon for 2.16&lt;/h4&gt;
&lt;p&gt;To prepare your addons for Ember 2.16, we encourage you to take the following
steps during the beta cycle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade your ember-cli-babel dependency to v6.8.0. This will permit your addon
to use the new modules in the &lt;code&gt;addon/&lt;/code&gt; and &lt;code&gt;test/&lt;/code&gt; directories.&lt;/li&gt;
&lt;li&gt;Ensure the &lt;code&gt;app/&lt;/code&gt; and &lt;code&gt;test-support/&lt;/code&gt; directories (both part of the dependent
app&amp;#39;s build) contain only re-exports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will ensure applications have a path forward in 2.16 to drop
ember-cli-shims from their dependencies.&lt;/p&gt;

&lt;p&gt;If you have questions please join us in &lt;a href="https://embercommunity.slack.com/messages/C045BNHAP/"&gt;&lt;code&gt;#-ember-cli&lt;/code&gt; on the Ember.js
Community Slack&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-js-2-16-beta'&gt;Deprecations in Ember.js 2.16-beta&lt;/h4&gt;
&lt;p&gt;One new deprecation is introduced in Ember.js 2.16-beta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For historical reasons, Ember controllers have a private property &lt;code&gt;content&lt;/code&gt;
that aliases the &lt;code&gt;model&lt;/code&gt; property. Relying on this legacy behavior is
deprecated and will be unsupported in Ember 2.17. See the
&lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_controller-content-alias"&gt;deprecation guide&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on the upcoming changes in Ember.js 2.16, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.16.0-beta.1"&gt;Ember.js 2.16.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-15'&gt;Changes in Ember Data 2.15&lt;/h3&gt;
&lt;p&gt;Ember Data 2.14 contained a number of performance improvements summarized
in the &lt;a href="https://emberjs.com/blog/2017/07/06/ember-2-14-released.html#toc_changes-in-ember-data-2-14"&gt;2.14 release
post&lt;/a&gt;.
Most of the development effort in the beta cycle has been to address regressions
introduced by those changes. 2.15.0 contains no new features or deprecations,
but does include the same bugfixes as can be found in 2.14.11.&lt;/p&gt;

&lt;p&gt;For details on changes in Ember Data 2.15.0, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.15.0"&gt;Ember Data 2.15.0 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data!
There is a new experimental tool for Ember CLI upgrades called
&lt;a href="https://github.com/kellyselden/ember-cli-update.git"&gt;ember-cli-update&lt;/a&gt;.
To use it, run this command to install it globally:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install -g ember-cli-update
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember-cli-update
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It runs your system git merge tool if it finds a conflict. This can be pretty
overwhelming for beginners, so you can run&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember-cli-update --ignore-conflicts
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to handle the conflicts yourself.&lt;/p&gt;

&lt;p&gt;If this new tool is giving you problems, you can still upgrade your projects
manually. To upgrade your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the
upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project directory to apply the
blueprint changes. You can preview those changes for &lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.14.0...v2.15.0"&gt;applications&lt;/a&gt;
and &lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.14.0...v2.15.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-15'&gt;Changes in Ember CLI 2.15&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_chrome-by-default'&gt;Chrome by default&lt;/h4&gt;
&lt;p&gt;Ember CLI will configure new apps to run tests in &lt;a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md"&gt;headless Chrome&lt;/a&gt;
by default, instead of PhantomJS.&lt;/p&gt;

&lt;p&gt;PhantomJS has served the wider JavaScript community well for a long time, being
a practical alternative to running browsers headless via tools like Xvbf. It
has, however, been a proxy for what we really want to test– the browsers that
users are running.&lt;/p&gt;

&lt;p&gt;Now that we can easily test in headless Chrome the motivation for using
PhantomJS has diminished, and as a result it is &lt;a href="https://groups.google.com/d/msg/phantomjs/9aI5d-LDuNE/5Z3SMZrqAQAJ"&gt;no longer actively maintained&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_app-import-files-within-node_modules'&gt;app.import files within node_modules&lt;/h4&gt;
&lt;p&gt;Ember CLI has an API for importing individual files into the built assets, by
calling &lt;code&gt;app.import&lt;/code&gt; within &lt;code&gt;ember-cli-build.js&lt;/code&gt;. This API now supports
importing files from within &lt;code&gt;node_modules&lt;/code&gt;, making it easier to consume
dependencies using only npm, rather than a more complicated mix of npm and
bower.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_node-js-8-support'&gt;Node.js 8 Support&lt;/h4&gt;
&lt;p&gt;Per the Ember CLI &lt;a href="https://github.com/ember-cli/ember-cli/blob/cac87e69f8c636d8b64889a6e214e987428c8dc7/docs/node-support.md"&gt;Node.js version support policy&lt;/a&gt;, Ember CLI officially supports Node 8 as the active Node.js version and will continue to do so throughout its upcoming &lt;a href="https://github.com/nodejs/LTS/tree/d9cb7b3059a478a6e33649cfb0a202cf456b2e28#nodejs-long-term-support-working-group"&gt;Active LTS window&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As part of this support, Ember CLI will no longer report warnings when run under
Node 8.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_improved-error-messages'&gt;Improved Error Messages&lt;/h4&gt;
&lt;p&gt;The improved error messages promised in the 2.14.0 release &lt;a href="https://www.emberjs.com/blog/2017/07/06/ember-2-14-released.html#toc_upcoming-changes-in-ember-cli-2-15"&gt;blog post&lt;/a&gt; is shipping with Ember CLI 2.15.0.  No more checking the console for template compilation errors 🎉!&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;p&gt;Work has begun on internal changes to support tree-shaking.  This is still in
its early stages but is a focus of current development.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.15 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.15.0"&gt;Ember CLI  2.15.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-16'&gt;Upcoming Changes in Ember CLI 2.16&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_addon-api-for-custom-transforms'&gt;Addon API for Custom Transforms&lt;/h4&gt;
&lt;p&gt;Ember CLI 2.16.0 will support addon import transformations via
&lt;code&gt;importTransforms&lt;/code&gt;, an implementation of &lt;a href="https://github.com/kratiahuja/rfcs/blob/add-import-api/active/0000-add-custom-transform.md"&gt;RFC 108&lt;/a&gt;.
This allows addons to register custom transformations to be run for vendor
resources included via &lt;code&gt;app.import&lt;/code&gt;.  This is an advanced feature for addon
authors.  It is particularly useful for
&lt;a href="https://github.com/ember-fastboot/fastboot"&gt;FastBoot&lt;/a&gt; to allow FastBoot-aware
addons to use a declarative API for conditionally importing code in Node.js or
browser environments.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/kratiahuja"&gt;@kratiahuja&lt;/a&gt; for proposing and implementing this feature.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.16.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.16.0-beta.1"&gt;Ember CLI 2.16.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. We are extremely grateful to our
contributors for their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember FastBoot 1.0 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/07/19/ember-fastboot-1-0-release.html"/>
    <id>http://emberjs.com/blog/2017/07/19/ember-fastboot-1-0-release.html</id>
    <published>2017-07-19T00:00:00+00:00</published>
    <updated>2017-07-19T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;We are thrilled to share that we have released Ember FastBoot 1.0 (including ember-cli-fastboot addon, fastboot-app-server and other FastBoot libraries).&lt;/p&gt;
&lt;h2 class="anchorable-toc" id="toc_what-is-ember-fastboot"&gt;What is Ember FastBoot?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ember-fastboot.com/"&gt;Ember FastBoot&lt;/a&gt; is a server-side rendering solution for ambitious Ember...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;We are thrilled to share that we have released Ember FastBoot 1.0 (including ember-cli-fastboot addon, fastboot-app-server and other FastBoot libraries).&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-is-ember-fastboot'&gt;What is Ember FastBoot?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ember-fastboot.com/"&gt;Ember FastBoot&lt;/a&gt; is a server-side rendering solution for ambitious Ember apps,
allowing your Ember apps to use principles of progressive enhancement, such as an initial render of your app without JavaScript.
It provides a complete solution for server-side rendering of your app from development to deployment.&lt;/p&gt;

&lt;p&gt;FastBoot works by running your Ember app in Node and shipping the rendered HTML of your initial requested route in your index.html (which also contains scripts for your app to boot in browser) to the user.
This helps you show meaningful content to your user while the JavaScript is being downloaded, and also helps the initial page of your app to paint faster.
Once the JavaScript downloads and your Ember app in the browser boots, it takes over the initial rendered HTML.
It also helps the content in your Ember application to be accessible to everyone, even if they have JavaScript disabled.&lt;/p&gt;

&lt;p&gt;FastBoot brings in an ecosystem to make it easier for your Ember apps to be built and deployed in a FastBoot-friendly way. To make your Ember app run in FastBoot, you simply need to install the &lt;code&gt;ember-cli-fastboot&lt;/code&gt; addon and make sure your app runs in Node. After installing the addon, you can continue building and developing your app using the same Ember CLI commands as you would without FastBoot. FastBoot also provides an application server (&lt;a href="https://github.com/ember-fastboot/fastboot-app-server"&gt;&lt;code&gt;fastboot-app-server&lt;/code&gt;&lt;/a&gt;) to run and deploy your Ember app in a Node environment. It manages downloading the Ember app, starting multiple HTTP server processes, and detecting when new versions of the application have been deployed.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_journey-to-ember-fastboot-1-0'&gt;Journey to Ember FastBoot 1.0&lt;/h2&gt;
&lt;p&gt;We have been working on making Ember FastBoot a 1.0 candidate for a long time. Early on, FastBoot worked by forking your Ember build and creating a different set of assets that were meant to be loaded and run in a Node environment. This meant that the assets being shipped to the browser and to Node contained almost the same content but they were packaged as different assets. It also meant that when developing your Ember app locally, for every incremental change, a developer had to wait for both assets to finish building before testing the change. With the help and feedback of early adopters in the community, we realized this strategy was turning out to be less developer-friendly.&lt;/p&gt;

&lt;p&gt;Therefore, to make sure the developer experience for Ember apps with FastBoot is the same as a vanilla app using Ember CLI, we decided to change the strategy on how to build the assets that need to be loaded in Node. Instead of forking the build and creating two sets of assets (one for browser and one for Node), we decided to build an additional asset for FastBoot that will be loaded with the same assets that are sent to the browser. This asset will allow apps/addons to override/add any behavior for their app when running in Node. This helped to make sure the build times with FastBoot were the same as a vanilla app.&lt;/p&gt;

&lt;p&gt;This also unlocked the potential to be able to run the server and browser versions of an app during development with a single command: the &lt;code&gt;ember serve&lt;/code&gt; command Ember developers are already used to.&lt;/p&gt;

&lt;p&gt;We also exposed an &lt;a href="https://github.com/ember-cli/rfcs/pull/80"&gt;additional public API&lt;/a&gt; in Ember CLI that allowed FastBoot to serve index.html with server rendered template using &lt;code&gt;ember serve&lt;/code&gt;. This API allows any other addon to tap into Ember CLI’s development-time Express server, not just FastBoot.&lt;/p&gt;

&lt;p&gt;All of these changes meant that we had to make a hard decision to break some addons’ compatibility with FastBoot. There were many addons that were made FastBoot-compatible (during early adoption), and we tried very hard to make sure these continued to work with this change. However, there was no easy way to do so in all cases without compromising the developer experience. Therefore, we realized we had to break some addons that were already FastBoot-compatible. We have a &lt;a href="https://gist.github.com/kratiahuja/d22de0fb1660cf0ef58f07a6bcbf1a1c"&gt;migration guide&lt;/a&gt; for addon authors to migrate to the new build strategy, and have already proactively reached out to many addon authors to help them resolve any compatibility issues&lt;/p&gt;

&lt;p&gt;We’re sorry we had to make a backwards-incompatible change before the 1.0 release, but we hope you agree that the significant improvement to the developer experience is worth the pain.&lt;/p&gt;

&lt;p&gt;By enhancing Ember CLI public API and taking advantage of those new capabilities, Ember developers that want to use FastBoot in their apps can now build their assets using &lt;code&gt;ember build&lt;/code&gt;, serve and develop locally using &lt;code&gt;ember serve&lt;/code&gt;. In the coming months, we will be exposing more declarative APIs in Ember CLI that will make it easy for app and addons to import assets that aren’t FastBoot-compatible.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You&lt;/h2&gt;
&lt;p&gt;With this, please check out the Ember FastBoot &lt;a href="http://ember-fastboot.com"&gt;website&lt;/a&gt; to learn more on how to make your Ember apps work in FastBoot. If you find any issues, please open issues in the appropriate repository in &lt;a href="https://github.com/ember-fastboot"&gt;ember-fastboot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This release wouldn’t have been possible without the help, support and feedback of the awesome Ember community. We also would not have been able to make FastBoot better without the vision and guidance of &lt;a href="http://github.com/tomdale"&gt;Tom Dale&lt;/a&gt;, &lt;a href="https://github.com/stefanpenner"&gt;Stefan Penner&lt;/a&gt;, &lt;a href="https://github.com/rwjblue"&gt;Robert Jackson&lt;/a&gt; and the entire Ember CLI core team. Thanks to &lt;a href="https://github.com/arjansingh"&gt;Arjan Singh&lt;/a&gt;, &lt;a href="https://github.com/danmcclain"&gt;Dan McClain&lt;/a&gt;, &lt;a href="https://github.com/habdelra"&gt;Hassan Abdel-Rahman&lt;/a&gt;, &lt;a href="https://github.com/kellyselden"&gt;Kelly Selden&lt;/a&gt;, &lt;a href="https://github.com/marcoow"&gt;Marco Otte-Witte&lt;/a&gt;, &lt;a href="https://github.com/pwfisher"&gt;Patrick Fisher&lt;/a&gt;, &lt;a href="https://github.com/ronco"&gt;Ron White&lt;/a&gt;, &lt;a href="https://github.com/simonihmig"&gt;Simon Ihmig&lt;/a&gt;, &lt;a href="https://github.com/tsubomii"&gt;Tsubomi Imamura&lt;/a&gt;, &lt;a href="https://github.com/thoov"&gt;Travis Hoover&lt;/a&gt; and many other contributors who helped along the way.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.14 and 2.15 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/07/06/ember-2-14-released.html"/>
    <id>http://emberjs.com/blog/2017/07/06/ember-2-14-released.html</id>
    <published>2017-07-06T00:00:00+00:00</published>
    <updated>2017-07-06T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.14.0 of Ember.js, Ember Data, and Ember CLI. You may have noticed we're a few weeks late on this release, as the
start of summer may have left us a little distracted 😅.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.15...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.14.0 of Ember.js, Ember Data, and Ember CLI. You may have noticed we&amp;#39;re a few weeks late on this release, as the
start of summer may have left us a little distracted 😅.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.15 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report
any bugs before they are published as a final release in six weeks&amp;#39; time. The
&lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to
continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-14'&gt;Changes in Ember.js 2.14&lt;/h3&gt;
&lt;p&gt;Ember.js 2.14.0 is an incremental, backwards compatible release of Ember with
bug-fixes, performance improvements, and minor deprecations.&lt;/p&gt;

&lt;p&gt;A notable change that began in Ember 2.13.0 and continues in 2.14.0 is improved packaging of the
framework itself. This includes adoption of &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; 6 and using
&lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; on internal Ember packages.&lt;/p&gt;

&lt;p&gt;The 2.14.0 release of Ember.js comes in as 7k smaller than 2.13.3 (minified
and gzipped). Additionally, initial render time of real world apps continues to
improve. This benchmark shows time-to-initial render of
&lt;a href="http://emberaddons.com/"&gt;emberaddons.com&lt;/a&gt; measured using
&lt;a href="https://github.com/krisselden/ember-macro-benchmark"&gt;ember-macro-benchmark&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-07-03/initial-render.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;re continuing to make similar improvements across the Ember project
libraries. By measuring the impact of these changes as we make them, we
will ensure complicated build changes avoid unintended regressions.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-2-14'&gt;Deprecations in Ember 2.14&lt;/h4&gt;
&lt;p&gt;Deprecations are added to Ember.js when an API will be removed at a later date.&lt;/p&gt;

&lt;p&gt;Each deprecation has an entry in the deprecation guide describing the migration
path to more stable API. Deprecated public APIs are not removed until a major
release of the framework.&lt;/p&gt;

&lt;p&gt;Consider using the
&lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt;
addon if you would like to upgrade your application without immediately addressing
deprecations.&lt;/p&gt;

&lt;p&gt;Two new deprecations are introduces in Ember 2.14.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ember.MODEL_FACTORY_INJECTIONS&lt;/code&gt; is deprecated. This flag enabled DI behavior
required by Ember Data prior to changes landed in Ember 2.11. It is intimate
API scheduled for removal in Ember 2.17.0. If your application sets this
flag you can safely remove it. See the &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_ember-model_factory_injections-removed"&gt;deprecation guide
entry&lt;/a&gt; and the &lt;a href="https://github.com/emberjs/ember.js/pull/15204"&gt;implementation PR&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;li&gt;Use of the &lt;code&gt;eventManager&lt;/code&gt; property on components and the &lt;code&gt;canDispatchToEventManager&lt;/code&gt;
property on &lt;code&gt;EventManager&lt;/code&gt;s has been deprecated. These rarely used and
undocumented parts of the already obscure event manager API where designed for
touch-event use cases that now have other and better solutions. See the
&lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_custom-eventmanger-deprecated"&gt;deprecation
guide&lt;/a&gt;
and
&lt;a href="https://github.com/emberjs/ember.js/pull/15078"&gt;deprecation PR&lt;/a&gt; for more
details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes in Ember.js 2.14.0, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.14.0"&gt;Ember.js 2.14.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-15'&gt;Upcoming Changes in Ember.js 2.15&lt;/h3&gt;
&lt;p&gt;Ember.js 2.15.0 will introduce two new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/rfcs/pull/225"&gt;RFC #225&lt;/a&gt; adds the argument
&lt;code&gt;model&lt;/code&gt; to the &lt;code&gt;{{mount}}&lt;/code&gt; engine helper. For example &lt;code&gt;{{mount &amp;#39;admin&amp;#39;
model=(hash user=user)}}&lt;/code&gt; would provide the object with &lt;code&gt;{user}&lt;/code&gt; as a &lt;code&gt;model&lt;/code&gt;
property on the engine&amp;#39;s application route. See the &lt;a href="https://github.com/emberjs/ember.js/pull/15174"&gt;implementation
PR&lt;/a&gt; and
&lt;a href="https://github.com/emberjs/ember.js/pull/15325/files"&gt;followup PR&lt;/a&gt; for more
details.&lt;/li&gt;
&lt;li&gt;Implementation phase 1 for &lt;a href="https://github.com/emberjs/rfcs/pull/95"&gt;RFC #95&lt;/a&gt;,
the routing service.
This RFC describes a first-class
public API routing service. Amongst other changes, the service provides a way for
Ember components to interact with routing state and controls. This initial
phase of the work includes all of the routing RFC besides the &lt;code&gt;RouteInfo&lt;/code&gt;
objects. See the
major &lt;a href="https://github.com/emberjs/ember.js/pull/14805"&gt;implementation&lt;/a&gt;
&lt;a href="https://github.com/emberjs/ember.js/pull/14980"&gt;pull&lt;/a&gt;
&lt;a href="https://github.com/emberjs/ember.js/pull/15414"&gt;requests&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 2.15, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.15.0-beta.1"&gt;Ember.js 2.15.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-14'&gt;Changes in Ember Data 2.14&lt;/h3&gt;
&lt;p&gt;Ember Data 2.14 brings with it a number of performance related optimizations.
Ember Data 2.14.0 was released on June 18th, and the current released
version is 2.14.3.&lt;/p&gt;

&lt;p&gt;In addition to a large number of minor tweaks, three changes stand out:&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_file-size-improvements'&gt;File-size Improvements&lt;/h4&gt;
&lt;p&gt;Starting in Ember Data 2.14.0, builds of Ember Data use Rollup
to produce a single micro-lib module. This helps with parse/eval time at boot
and reduces both the pre and post-gzip sizes by ~23Kb and ~3Kb respectively. We
also used Babel 6 and some manual tuning to further reduce the transpiled size.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_lazy-relationships'&gt;Lazy Relationships&lt;/h4&gt;
&lt;p&gt;Previously, Ember Data would immediately create the connections between records
necessary for relationships.  This is unnecessary overhead if these
relationships aren&amp;#39;t immediately accessed. In Ember Data 2.14.0 relationship
connections are established only upon access to the relationship.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deferred-serializer-lookup'&gt;Deferred serializer lookup&lt;/h4&gt;
&lt;p&gt;Previously, Ember Data would lookup the serializer for a requested data type
immediately after making the network request. This strategy allowed the cost of
serializer instantiation to be paid while waiting for the network to resolve.
However, this strategy essentially traded initial render performance for a
faster load of non-critical data. In this release, we&amp;#39;re re-tuned this part of
the system to be more friendly to initial rendering by deferring serializer
lookup until data returns from the network.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_known-issues'&gt;Known Issues&lt;/h4&gt;
&lt;p&gt;Unfortunately, changes in Ember Data 2.14 appear to have introduced a number of
regressions in less well defined areas of Ember Data&amp;#39;s usage. If you experience
trouble after upgrading to 2.14, we suggest locking to 2.13 and either
commenting on an existing issue or opening a new issue as appropriate.&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://github.com/emberjs/data/issues"&gt;Ember Data issues&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-14'&gt;Deprecations in Ember Data 2.14&lt;/h4&gt;
&lt;p&gt;Several private but non-underscored methods (&amp;quot;intimate&amp;quot; API) have been
deprecated in favor of underscored variants.  &lt;code&gt;didUpdateAll&lt;/code&gt; is now
&lt;code&gt;_didUpdateAll&lt;/code&gt;.  &lt;code&gt;buildInternalModel&lt;/code&gt; is now &lt;code&gt;_buildInternalModel&lt;/code&gt;. These
APIs will be removed in Ember Data 2.15.0. See &lt;a href="https://github.com/emberjs/data/pull/4909"&gt;PR #4949
&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember Data 2.14, please review the
&lt;a href="https://github.com/emberjs/data/blob/release/CHANGELOG.md#release-2142-june-19-2017"&gt;Ember Data release
changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 2.15, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.15.0-beta.1"&gt;Ember Data 2.15.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data. To upgrade
your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the
upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project directory to apply the
blueprint changes. You can preview those changes for &lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.13.0...v2.14.0"&gt;applications&lt;/a&gt;
and &lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.13.0...v2.14.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-14'&gt;Changes in Ember CLI 2.14&lt;/h3&gt;
&lt;p&gt;Majority of the changes in this release happened under the hood to improve documentation as well as code cleanup and better integration with &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_npm-5-and-node-8-support'&gt;NPM 5 and Node 8 support&lt;/h4&gt;
&lt;p&gt;Ember CLI now supports Node 8 and npm 5 out of the box, make sure to try it out! Some developers reported issues with &lt;code&gt;node@8.1.0&lt;/code&gt; where Ember CLI would hang indefinitely. After upgrading to version &lt;code&gt;node@8.1.2&lt;/code&gt;+ this issue no longer appeared.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_specifying-a-blueprint-for-a-new-app'&gt;Specifying a blueprint for a new app&lt;/h4&gt;
&lt;p&gt;Ember CLI 2.14.0 brings support for initial blueprint packages as an argument to
&lt;code&gt;ember new&lt;/code&gt;. This empowers other projects to better utilize Ember CLI as a part
of their own ecosystem. In addition it permits experimentation with non-default
Ember application setups.&lt;/p&gt;

&lt;p&gt;For example to generate an &lt;a href="http://ember-cli-deploy.com/"&gt;&lt;code&gt;ember-cli-deploy&lt;/code&gt;&lt;/a&gt;
plugin use the &lt;code&gt;@ember-cli-deploy/plugin-blueprint&lt;/code&gt; package (&lt;a href="https://github.com/ember-cli-deploy/plugin-blueprint"&gt;repo on
GitHub&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember new my-new-deploy-plugin -b @ember-cli-deploy/plugin-blueprint
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The package will be downloaded from NPM and used to provide the initial
blueprint for your Ember CLI app.&lt;/p&gt;

&lt;p&gt;Two other examples of this feature being used in the wild are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a new &lt;a href="https://glimmerjs.com/"&gt;Glimmer.js&lt;/a&gt; application. See &lt;a href="https://github.com/glimmerjs/glimmer-blueprint"&gt;glimmerjs/glimmer-blueprint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Experiment with Ember&amp;#39;s &amp;quot;Module Unification&amp;quot; filesystem layout by using the &lt;a href="https://github.com/emberjs/ember-module-unification-blueprint"&gt;ember-module-unification-blueprint&lt;/a&gt; package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Node 7.x on Windows is now supported.&lt;/li&gt;
&lt;li&gt;By default, Ember CLI collects usage information. Documentation has now been
added describing what is collected and who has access to this information.
See
&lt;a href="https://github.com/ember-cli/ember-cli/blob/master/Analytics.md"&gt;Analytics.md&lt;/a&gt;
for more information.&lt;/li&gt;
&lt;li&gt;A flag &lt;code&gt;--no-welcome&lt;/code&gt; has been added for &lt;code&gt;ember new&lt;/code&gt; and &lt;code&gt;ember init&lt;/code&gt;. Use
this flag to skip the inclusion of &lt;code&gt;ember-welcome-page&lt;/code&gt; as a dependency in
newly created projects.&lt;/li&gt;
&lt;li&gt;The Ember CLI team recommends Ember Addons use the lowest supported Node release when
running CI. As of this release, that means Node 4.x.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.14.0 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.14.0"&gt;Ember CLI 2.14.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-15'&gt;Upcoming Changes in Ember CLI 2.15&lt;/h3&gt;
&lt;p&gt;Ember CLI 2.15.0 will introduce improved error messages that appear in your browser.
This change means less checking of the console for build errors. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-07-03/error.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.15.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.15.0-beta.1"&gt;Ember CLI 2.15.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. We are extremely grateful to our
contributors for their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.13 and 2.14 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/04/29/ember-2-13-released.html"/>
    <id>http://emberjs.com/blog/2017/04/29/ember-2-13-released.html</id>
    <published>2017-04-29T00:00:00+00:00</published>
    <updated>2017-04-29T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.13.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.14 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.13.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.14 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report
any bugs before they are published as a final release in six weeks&amp;#39; time. The
&lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to
continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-13'&gt;Changes in Ember.js 2.13&lt;/h3&gt;
&lt;p&gt;Building on the addition of &lt;code&gt;factoryFor&lt;/code&gt; in Ember 2.12, Ember 2.13 changes
the way dependency injection is implemented in the framework. Until 2.12,
dependencies were injected onto an instance using &lt;code&gt;extend&lt;/code&gt; to create a subclass.
This created an excessive number of subclasses during the execution of an
application. In Ember 2.13 injections are passed to an object via &lt;code&gt;create&lt;/code&gt;
during instantiation. This results in a notable performance improvement
that grows in impact with the complexity of an application.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0150-factory-for.md"&gt;RFC #150&lt;/a&gt;
and pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14360"&gt;#14360&lt;/a&gt; for
more details about this change.&lt;/p&gt;

&lt;p&gt;Additionally, this release contains a further refinement on the &amp;quot;binary VM&amp;quot;
change landed in 2.12. By using integers for common Glimmer wire-format strings,
compiled template sizes in 2.13 will see an incremental size reduction.&lt;/p&gt;

&lt;p&gt;In addition to these and other improvements, several changes arising
from the &lt;a href="https://github.com/emberjs/rfcs"&gt;RFC&lt;/a&gt; process have been implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/rfcs/issues/146"&gt;RFC issue #146&lt;/a&gt; advocated for the
addition of &lt;code&gt;resumeTest&lt;/code&gt; as a compliment to &lt;code&gt;pauseTest&lt;/code&gt;. This was implemented
in &lt;a href="https://github.com/emberjs/ember.js/pull/13663"&gt;#13663&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0186-track-unique-history-location-state.md"&gt;RFC #186&lt;/a&gt;
describes the addition of &lt;code&gt;uuid&lt;/code&gt; as a property on &lt;code&gt;HistoryLocation&lt;/code&gt; adapters
for the router. This addition makes it possible to track scroll locations
to a point in browsing history. See pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14011"&gt;#14011&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-2-13'&gt;Deprecations in Ember 2.13&lt;/h4&gt;
&lt;p&gt;A bit of cleanup has been done to reduce confusion (during implementation of the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md"&gt;router service&lt;/a&gt;) which resulted in adding a deprecation for accessing the private &lt;code&gt;router&lt;/code&gt; property
of the router. This property has always been private API, but a number of addons have resorted to
using it due to lack of public API options (though the router service should address these remaining
cases). Please review the &lt;a href="https://emberjs.com/deprecations/v2.x/#toc_ember-router-router-renamed-to-ember-router-_routermicrolib"&gt;deprecation guide&lt;/a&gt;
for more details.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember.js 2.13, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.13.0"&gt;Ember.js 2.13.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-14'&gt;Upcoming Changes in Ember.js 2.14&lt;/h3&gt;
&lt;p&gt;Ember 2.14 is shaping up to be largely a bugfix release, containing a significant amount of internal cleanup.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 2.14, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.14.0-beta.1"&gt;Ember.js 2.14.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-13'&gt;Changes in Ember Data 2.13&lt;/h3&gt;
&lt;p&gt;Ember Data 2.13 represents the work of 20 direct contributors
and over 120 commits.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ds-extended-errors&lt;/code&gt; (&lt;a href="https://github.com/emberjs/data/pull/3586"&gt;#3586&lt;/a&gt; &lt;a href="https://github.com/emberjs/data/pull/4287"&gt;#4287&lt;/a&gt;) feature has been enabled for Ember Data 2.13.&lt;/p&gt;

&lt;p&gt;This feature introduces an &lt;code&gt;extend&lt;/code&gt; method on errors which allows
users to create their own custom errors that extend from
&lt;code&gt;DS.AdapterError&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;const MyCustomError = DS.AdapterError.extend({ &lt;span class="key"&gt;message&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;My custom error.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The feature also introduces some new errors to the REST adapter which will
be used to reject the adapter promises based on http status of the API
response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[401] &lt;code&gt;DS.UnauthorizedError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[403] &lt;code&gt;DS.ForbiddenError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[404] &lt;code&gt;DS.NotFoundError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[409] &lt;code&gt;DS.ConflictError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[500] &lt;code&gt;DS.ServerError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/tchak"&gt;tchak&lt;/a&gt; and
&lt;a href="https://github.com/twokul"&gt;twokul&lt;/a&gt; for their work on this feature and
&lt;a href="https://github.com/lindyhopchris"&gt;lindyhopchris&lt;/a&gt; for his help
documenting the feature.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-13'&gt;Deprecations in Ember Data 2.13&lt;/h4&gt;
&lt;p&gt;Ember Data 2.13 deprecates the &lt;code&gt;data-adapter&lt;/code&gt;, &lt;code&gt;injectStore&lt;/code&gt;,
&lt;code&gt;transforms&lt;/code&gt;, and &lt;code&gt;store&lt;/code&gt; Ember application initializers that Ember Data injects
into apps. The deprecation was proposed via &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0181-deprecate-ember-data-initializers.md"&gt;an RFC&lt;/a&gt;,
and the Ember Data team proactively submitted pull-requests for all usages of
these initializers in open source addons. &lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember Data 2.13, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.13.0"&gt;Ember Data 2.13.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-data-2-14'&gt;Upcoming changes in Ember Data 2.14&lt;/h3&gt;
&lt;p&gt;In 2.14, Ember Data continues its internal refactorings and performance work without
impacting public APIs. It is shaping up nicely with reduced asset size (~ 3KB savings),
better warnings and errors around malformed JSONAPI payloads, and simplified internals.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-14'&gt;Deprecations in Ember Data 2.14&lt;/h4&gt;
&lt;p&gt;Ember Data 2.14
&lt;a href="https://github.com/emberjs/data/pull/4909/files"&gt;deprecates&lt;/a&gt; the
private method &lt;code&gt;didUpdateAll&lt;/code&gt;. If you are using it in your codebase
please use the updated methods name &lt;code&gt;_didUpdateAll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 2.14, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.14.0-beta.1"&gt;Ember Data 2.14.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data! To upgrade
your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the
upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project directory to apply the
blueprint changes. You can preview those changes for &lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.12.0...v2.13.0"&gt;applications&lt;/a&gt;
and &lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.12.0...v2.13.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-13'&gt;Changes in Ember CLI 2.13&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_add-support-for-using-code-yarn-code'&gt;Add support for using &lt;code&gt;yarn&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Ember CLI projects have been able to utilize &lt;code&gt;yarn&lt;/code&gt; for dependency management for quite some time, however it was not well supported by
the default generators. In 2.13, Ember CLI is now &amp;quot;yarn aware&amp;quot;, and will use &lt;code&gt;yarn&lt;/code&gt; for tasks such as &lt;code&gt;ember install&lt;/code&gt; if it detects that
&lt;code&gt;yarn&lt;/code&gt; is installed and a &lt;code&gt;yarn.lock&lt;/code&gt; exists in the project. You can even instruct &lt;code&gt;ember new&lt;/code&gt; to generate a new project with a &lt;code&gt;yarn.lock&lt;/code&gt;
for you via &lt;code&gt;ember new foo --yarn&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_enable-instrumentation-hooks'&gt;Enable Instrumentation Hooks&lt;/h4&gt;
&lt;p&gt;Ember CLI has had the ability to generate custom instrumentation output for builds for a few years now (introduced on 2015-08-24), but
this information has not been readily accessible. In 2.13, ember-cli exposes this information to addons that implement the &lt;code&gt;instrumentation&lt;/code&gt;
hook. This allows addons to access many things that were previously very difficult (e.g. reliable build time reporting).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/hjdivad"&gt;@hjdivad&lt;/a&gt; for proposing and implementing this feature. Please read through &lt;a href="https://github.com/ember-cli/rfcs/blob/master/complete/0091-addon-instrumentation-experimental-hooks.md"&gt;the RFC&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_targets'&gt;Targets&lt;/h4&gt;
&lt;p&gt;In order to allow addons to understand the desired target platforms of the app that they are operating in, a new file has been added
to all generated projects: &lt;code&gt;config/targets.js&lt;/code&gt;. This file exposes the supported targets so that tooling such as &lt;a href="https://github.com/postcss/autoprefixer"&gt;autoprefixer&lt;/a&gt; 
and &lt;a href="https://github.com/babel/babel-preset-env"&gt;babel-preset-env&lt;/a&gt; can properly understand the level of transpilation that is needed.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;@cibernox&lt;/a&gt; for proposing and implementing this feature. &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; 
recently wrote a blog post reviewing the new feature and how to utilize it: &lt;a href="http://rwjblue.com/2017/04/21/ember-cli-targets/"&gt;Ember CLI Targets&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_babel-6'&gt;Babel 6&lt;/h4&gt;
&lt;p&gt;Babel 6 support has been added to Ember CLI internally and is now used by default for newly generated projects (both applications and addons).
Due to the way that Ember CLI handles transpilation this transition can be done gradually by updating each addon to utilize newer versions of
&lt;a href="https://github.com/babel/ember-cli-babel"&gt;ember-cli-babel&lt;/a&gt;. Updating your application to start using Babel 6 for its own transpilation is as simple as:&lt;/p&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# if using yarn:
yarn upgrade ember-cli-babel@6

# if using npm:
npm install --save-dev ember-cli-babel@6
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower.json&lt;/code&gt; is no longer included in a newly generated project.&lt;/li&gt;
&lt;li&gt;Fix command interruption issues on windows.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;filesToRemove&lt;/code&gt; property for custom blueprints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.13 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.13.0"&gt;Ember CLI 2.13.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-14'&gt;Upcoming Changes in Ember CLI 2.14&lt;/h3&gt;
&lt;p&gt;In Ember CLI 2.14, support was added to &lt;code&gt;ember new&lt;/code&gt; to allow a blueprint to be consumed from an NPM package. This enables projects to utilize Ember CLI&amp;#39;s
ergonomics to generate non-Ember applications. Common examples of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a new &lt;a href="https://glimmerjs.com/"&gt;Glimmer.js&lt;/a&gt; application. See &lt;a href="https://github.com/glimmerjs/glimmer-blueprint"&gt;glimmerjs/glimmer-blueprint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generate a new &lt;a href="http://ember-cli-deploy.com/"&gt;ember-cli-deploy&lt;/a&gt; plugin. See &lt;a href="https://github.com/ember-cli-deploy/plugin-blueprint"&gt;ember-cli-deploy/plugin-blueprint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These can be used as simply as:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install -g ember-cli@2.14.0-beta.1
ember new ember-cli-deploy-hello -b @ember-cli-deploy/plugin-blueprint
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more details on the changes in Ember CLI 2.14.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.14.0-beta.1"&gt;Ember CLI 2.14.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. We are extremely grateful to our
contributors for their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>EmberConf 2017: State of the Union</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html"/>
    <id>http://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html</id>
    <published>2017-04-05T00:00:00+00:00</published>
    <updated>2017-04-05T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js (or should we say &lt;a href="http://yehudakatz.com/2011/12/08/announcing-amber-js/"&gt;Amber.js&lt;/a&gt;) turned five years old last December. In some ways, five years is a short amount of time. But when measured in web framework years, it feels like a downright eternity.&lt;/p&gt;

&lt;p&gt;As Yehuda and I were getting ready for our...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Ember.js (or should we say &lt;a href="http://yehudakatz.com/2011/12/08/announcing-amber-js/"&gt;Amber.js&lt;/a&gt;) turned five years old last December. In some ways, five years is a short amount of time. But when measured in web framework years, it feels like a downright eternity.&lt;/p&gt;

&lt;p&gt;As Yehuda and I were getting ready for our keynote presentation at this year&amp;#39;s EmberConf, we tried to remember what developing web apps was really like in 2011. We knew that the web had changed for the better since then, but I think we both had repressed our memories of how truly awful it was.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-web-in-2011'&gt;The Web in 2011&lt;/h2&gt;
&lt;p&gt;The most popular browser in 2011, by a wide margin, was IE8. Today, for most people, IE8 is a distant, half-remembered nightmare.&lt;/p&gt;

&lt;p&gt;Today, we freely use new language features like async functions, destructuring assignment, classes, and arrow functions. We even get to use not-quite-standardized features like decorators ahead of time thanks to transpilers like Babel and TypeScript. In 2011, however, everyone was writing ES3. ES5 was considered too &amp;quot;cutting edge&amp;quot; for most people to adopt.&lt;/p&gt;

&lt;p&gt;DOM and CSS features we&amp;#39;ve come to take for granted weren&amp;#39;t available, like Flexbox and even &lt;code&gt;querySelectorAll&lt;/code&gt;. Things were so primitive that, hard as it is to believe now, &lt;em&gt;no one even questioned whether you might not need jQuery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/web-in-2011.png" alt="Slide showing the state of the web in 2011. No browsers implement WebSockets, Flexbox doesn&amp;#39;t exist, only 49% of browsers have Web Workers, and IE8 has 27% market share. Chrome (all versions) is a distant second place at 18% market share."&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-in-2011'&gt;Ember in 2011&lt;/h2&gt;
&lt;p&gt;Ember was still finding its sea legs, too. There was no Ember App Kit yet, let alone Ember CLI. There was no router. npm 1.0 wasn&amp;#39;t released until halfway through 2011. Ember apps used a global namespace and many people included their Handlebars templates in inline script tags.&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/public/ember.js&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;      Hello, &lt;span class="tag"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{firstName}} {{lastName}}&lt;span class="tag"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;!&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;say-hello&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;      &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;my-cool-control&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="tag"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;      App.ApplicationController = Ember.Controller.extend({
        &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Trek&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Glowacki&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      });&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As antiquated as this feels today, this was more or less how most JavaScript apps were written.&lt;/p&gt;

&lt;p&gt;Some parts of Ember are truly embarrassing to look back on. Because IE was so dominant, our rendering engine was optimized for its performance quirks. DOM APIs were extremely slow, so our templates were string-based: render everything as a string of HTML, and then insert it with a single &lt;code&gt;innerHTML&lt;/code&gt; operation. (Modern rendering engines like React, Angular, and Glimmer all create their own DOM instead of asking the browser to parse HTML.)&lt;/p&gt;

&lt;p&gt;Unfortunately, letting the browser create our DOM elements for us led to some… interesting approaches to go back and find them later. For one thing, we had to use the awkward &lt;code&gt;{{bindAttr}}&lt;/code&gt; helper just to bind an element&amp;#39;s attributes.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;logo&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="attribute-value"&gt;logoUrl&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;alt&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Logo&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Even worse was the &lt;a href="http://colynb.com/posts/dom-horror-with-emberjs.html"&gt;Eldritch horror awaiting anyone who looked at the DOM&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember162&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember-view&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Welcome to Ember.js&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-0-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-5-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-2-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-6-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            red
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-6-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-2-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-3-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-7-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            yellow
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-7-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-3-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-4-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-8-start&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            blue
            &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-8-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-4-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-5-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-0-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;metamorph-1-end&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-placeholder&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All of that just to render what today looks like this:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Welcome to Ember.js&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;red&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;yellow&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;blue&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_ahead-of-the-curve'&gt;Ahead of the Curve&lt;/h2&gt;
&lt;p&gt;As bad as some of the early stuff was, we also have to credit Ember with being ahead of the curve. In many ways, Ember has continued to push the state of the art of client-side JavaScript forward.&lt;/p&gt;

&lt;p&gt;Ember was the first to declare that build tools were critical to any frontend stack, making Ember CLI a first class part of the framework. Having opinionated build tools meant that we were able to be the first framework to embrace next-generation features of ES6, like Promises and modules, to name a few.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/ember-cli.png" alt="Screenshot of the Ember CLI website"&gt;&lt;/p&gt;

&lt;p&gt;While other frameworks have only recently landed Ahead of Time (AOT) compiled templates, we&amp;#39;ve had them for years—and have now moved on to an even more efficient compiled bytecode format. Indeed, the fact that we&amp;#39;ve compatibly moved from string-based rendering to DOM-based rendering to our new VM-based architecture with Glimmer has been one of the keys to Ember&amp;#39;s longevity.&lt;/p&gt;

&lt;p&gt;Perhaps the biggest impact Ember has had is not the &lt;em&gt;what&lt;/em&gt; but the &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Major changes to the framework go through an RFC process that solicits community feedback early and often. By requiring new features to go through a rigorous design process, even seasoned contributors must articulate rationales and the context driving different tradeoffs. I often hear from developers who don&amp;#39;t even use Ember that they&amp;#39;ve adopted our RFC process for their own teams at work.&lt;/p&gt;

&lt;p&gt;Ember was also the first major framework to adopt Chrome&amp;#39;s six week release cycle. By putting all new work behind feature flags, a big feature taking longer than expected doesn&amp;#39;t block getting other important improvements into your hands. Stable, beta and canary release channels let you decide for yourself the balance between riding the cutting edge or preferring battle-tested stability.&lt;/p&gt;

&lt;p&gt;Ember&amp;#39;s 2.0 release was also novel: it was the first framework to release a major new version without any breaking changes. An Ember app running on 1.13 could upgrade seamlessly to Ember 2.0, so long as it had no deprecation warnings.&lt;/p&gt;

&lt;p&gt;While the transition was bumpier than we would have liked for many people, this experiment showed how valuable focusing on upgrade paths is. Compared to the previous status quo of releasing new major versions that require you to effectively rewrite your app, we believe Ember 2.0 was an important bellwether that showed that JavaScript frameworks can make progress without breaking their ecosystem.&lt;/p&gt;

&lt;p&gt;Of course, I&amp;#39;d be remiss if I didn&amp;#39;t mention the Ember router.&lt;/p&gt;

&lt;p&gt;Routers that map URLs on to application code exist in every server-side framework, such as Rails and Django. Stateful UI architecture has also been around forever. Ember&amp;#39;s architecture borrows a lot from Cocoa, but the MVC idea has been around since at least Smalltalk-76.&lt;/p&gt;

&lt;p&gt;Ember&amp;#39;s contribution was to stumble on to the idea that, in single-page apps, &lt;em&gt;URLs and app architecture are intrinsically linked&lt;/em&gt;. By tying the models and components that appear on screen to the URL, keeping the two in sync becomes the framework&amp;#39;s job.&lt;/p&gt;

&lt;p&gt;Circa 2011 and before, it was common to hear people lament that JavaScript had become the new Flash. Websites that heavily relied on JavaScript &amp;quot;felt broken&amp;quot; in sometimes hard-to-articulate ways. Refreshing the page left you looking at a different thing. Sharing links took people to the wrong place. Bookmarks didn&amp;#39;t work. Command-clicking to open in a new tab didn&amp;#39;t work.&lt;/p&gt;

&lt;p&gt;In 2017, people use JavaScript-driven apps all the time and rarely notice. By making the URL the cornerstone of how you organize your application, for the first time, Ember helped you build JavaScript applications were no longer &lt;em&gt;broken by default&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Today there are fantastic routers available for React, Angular and other libraries, and all of them can trace a lineage back to Ember&amp;#39;s router. The turning point for the wider acceptance of single-page apps happened when, as a community, we started to embrace the URL. Ember&amp;#39;s router led that charge.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-s-next'&gt;What&amp;#39;s Next?&lt;/h2&gt;
&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/hn-thread.png" alt="Screenshot of a Hacker News thread where people joke about JavaScript frameworks dying after a competitor is released. &amp;quot;Ember? I thought that died after React came out.&amp;quot; &amp;quot;React? I thought that died after Vue.js came out.&amp;quot; &amp;quot;Vue.js? I thought that died when Angular 4 came out.&amp;quot; &amp;quot;Angular 4? I thought that died when Scala.js came out.&amp;quot; &amp;quot;Scala.js? I thought that died when Inferno came out.&amp;quot; &amp;quot;Inferno? I thought that died when Riot came out.&amp;quot; &amp;quot;Riot? I thought that died when Rakun.js came out.&amp;quot; &amp;quot;That&amp;#39;s why I stick to jQuery 1.2 Ain&amp;#39;t neveh goin&amp;#39; nowheh!&amp;quot; The final comment reads: &amp;quot;I can&amp;#39;t wait to retire.&amp;quot;"&gt;&lt;/p&gt;

&lt;p&gt;Five years is a good run for JavaScript frameworks. We&amp;#39;ve done much, much better than average: most frameworks die young.&lt;/p&gt;

&lt;p&gt;But what should our next move be? Many worthy competitors have come along, without all of the backwards compatibility baggage. Almost all of Ember&amp;#39;s standout features, like build tools, AOT template compilation, first-class router, and server-side rendering are available for competing libraries.&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; decide to put Ember into maintenance mode, cede the future to the newcomers, and focus on catering to the existing user base for many years to come. But I don&amp;#39;t think that&amp;#39;s what we should do.&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s possible to stay cutting edge without breaking the apps people have spent years investing in, and I think we have just the formula for doing it.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-didn-t-work'&gt;What Didn&amp;#39;t Work?&lt;/h2&gt;
&lt;p&gt;With the benefit of hindsight, we can examine the improvements we&amp;#39;ve tried to make to Ember in the last year or two, and figure out what worked and what didn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a little bit embarrassing to have to write this, since it&amp;#39;s something I knew &lt;em&gt;intellectually&lt;/em&gt; beforehand. But, in short, what didn&amp;#39;t work for us was anything requiring big design upfront.&lt;/p&gt;

&lt;p&gt;We wanted to make Ember easier to learn, so we wanted to eliminate controllers from the programming model. To do that, we wanted to introduce the idea of &amp;quot;routable components&amp;quot;—components that are managed by the router.&lt;/p&gt;

&lt;p&gt;But we also wanted to make Ember more approachable by introducing components that used &lt;code&gt;&amp;lt;angle-bracket&amp;gt;&lt;/code&gt; syntax, so they work just like the HTML elements people are already familiar with. And if we were introducing routable components, they should obviously use the new component syntax—we shouldn&amp;#39;t introduce a new API that people immediately felt like they had to rewrite.&lt;/p&gt;

&lt;p&gt;We were also embarrassed that the design of the &amp;quot;pods&amp;quot; filesystem layout was left in a half-completed state, and we considered it to be a dead end for other features we wanted to introduce. But filesystem layout touches nearly everything, so the Module Unification RFC became another design that invisibly delayed other important features.&lt;/p&gt;

&lt;p&gt;All of this work felt high-stakes because it touched such a fundamental part of Ember: the component API. Ember contributors felt like this was their one shot to get in that feature they&amp;#39;d always wanted. And if you had one shot, one opportunity, to seize everything you ever wanted in one moment, would you capture it, or just let it slip?&lt;/p&gt;

&lt;p&gt;Creating this series of dependencies meant that one disagreement on a particular RFC could delay work on another that, from the outside, seemed unrelated. It also became near impossible for any one person to keep the state of all of the proposals in their head, so we did a very bad job of communicating status updates to the community. It&amp;#39;s no surprise that many people perceive Ember as having slowed down over the last year.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-did-work'&gt;What Did Work?&lt;/h2&gt;
&lt;p&gt;Despite these missteps, we actually did ship some pretty cool stuff in 2016 that people were able to use right away.&lt;/p&gt;

&lt;p&gt;FastBoot is an addon that people can drop in to their app to get server-side rendering with minimal setup. Engines allow big teams to split their app into smaller apps that can be worked on (and loaded) independently.&lt;/p&gt;

&lt;p&gt;In both cases, we focused on adding small primitives into the framework that exposed some missing capability.&lt;/p&gt;

&lt;p&gt;For example, for FastBoot, &lt;a href="https://github.com/emberjs/ember.js/pull/12394"&gt;we added the &lt;code&gt;visit()&lt;/code&gt; method to &lt;code&gt;Ember.Application&lt;/code&gt;&lt;/a&gt;. This method takes a URL and allows you to programmatically route an Ember app (instead of having to change the browser&amp;#39;s &lt;code&gt;window.location&lt;/code&gt; directly). FastBoot uses this API to render Ember applications in Node.js.&lt;/p&gt;

&lt;p&gt;While we figure out the best way to deploy production-ready server-side rendered JavaScript apps, we can move that experimentation out of Ember and into the &lt;code&gt;ember-fastboot&lt;/code&gt; addon.&lt;/p&gt;

&lt;p&gt;Engines worked similarly: &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0010-engines.md"&gt;an RFC proposed a small set of primitives&lt;/a&gt;, and then the addon could build on these to add features we were less certain of.&lt;/p&gt;

&lt;p&gt;And, of course, there&amp;#39;s Glimmer 2.&lt;/p&gt;

&lt;p&gt;Shipping in Ember 2.10, this ground-up rewrite of our rendering engine was a huge success. We dramatically reduced compiled template size, with many apps seeing 30-50% reductions in total payload (after gzip!).&lt;/p&gt;

&lt;p&gt;Initial rendering performance was also improved. For example, the &amp;quot;Render Complex List&amp;quot; scenario in &lt;a href="https://github.com/eviltrout/ember-performance"&gt;ember-performance&lt;/a&gt; ran 2x faster in Ember 2.10 than 2.9.&lt;/p&gt;

&lt;p&gt;Incredibly, these results were achieved as a &lt;em&gt;drop-in upgrade&lt;/em&gt; to Ember.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I can&amp;#39;t think of a release of a library/framework that reduced my app&amp;#39;s size AND significantly improved perf - Ember 2.10 is super rare.&lt;/p&gt;&amp;mdash; Robin Ward (@eviltrout) &lt;a href="https://twitter.com/eviltrout/status/808710602021634048"&gt;December 13, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Ground-up rewrites are usually fraught with compatibility peril. In this case, the secret was to invest upfront in infrastructure that allowed us to keep both the old and new rendering engine on &lt;code&gt;master&lt;/code&gt; at the same time.&lt;/p&gt;

&lt;p&gt;Rendering tests were run twice, once on each engine, so we always had a snapshot of how far along we were. And by making compatibility with the existing API the goal from the start, there was no temptation to start from a &amp;quot;pure&amp;quot; re-implementation and figure out compatibility later.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_our-new-modus-operandi-unlocked-experimentation-in-place-upgrades'&gt;Our New Modus Operandi: Unlocked Experimentation, In-Place Upgrades&lt;/h2&gt;
&lt;p&gt;Going forward, we will prioritize adding missing capabilities and primitives to the core Ember framework. No one should feel like they need core team approval to experiment with new ways of building applications.&lt;/p&gt;

&lt;p&gt;In some places, we&amp;#39;re already good at this. For example, &lt;a href="http://www.ember-redux.com/"&gt;ember-redux&lt;/a&gt; and &lt;a href="https://ember-concurrency.com/#/docs"&gt;ember-concurrency&lt;/a&gt; are two examples that push the state of the art by building on top of Ember&amp;#39;s already well-rationalized object model. Other areas, like our router and components, have been less open for experimentation (at least when using public API).&lt;/p&gt;

&lt;p&gt;If we do decide that an existing feature needs a rethink, we will follow the Glimmer model: keep both the old and new running at once, and hold off merging until tests (and your apps!) work without changes.&lt;/p&gt;

&lt;p&gt;This is another example of something that should have been more obvious to us ahead of time. We&amp;#39;re big fans of the &lt;a href="https://github.com/extensibleweb/manifesto"&gt;Extensible Web Manifesto&lt;/a&gt;, and this bears an uncanny resemblance to that.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_glimmer-s-performance-sweet-spot'&gt;Glimmer&amp;#39;s Performance Sweet Spot&lt;/h2&gt;
&lt;p&gt;Last year, we talked about Glimmer&amp;#39;s VM architecture and promised many performance benefits to come. We delivered Glimmer in Ember 2.10 and this year we&amp;#39;re continuing to reap the performance rewards of its modular VM architecture.&lt;/p&gt;

&lt;p&gt;Benchmarks are essential to measuring our performance improvements, but benchmarks are also dangerous. Focusing on the wrong benchmark, or just one kind of benchmark, can cause you to miss important context.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://benediktmeurer.de/2017/03/01/v8-behind-the-scenes-february-edition/"&gt;V8&amp;#39;s Benedikt Meurer has a fantastic blog post about their new Ignition + TurboFan architecture&lt;/a&gt;, and how years of benchmark competition had caused them to be &amp;quot;over-focused on the peak performance case&amp;quot; while &amp;quot;baseline performance was a blind spot.&amp;quot;&lt;/p&gt;

&lt;p&gt;JavaScript libraries can fall into the same trap too. Community discussion often ends up focused around one measurement, which libraries then feel obligated to optimize for.&lt;/p&gt;

&lt;p&gt;For example, a few years ago it was updating performance and the infamous &lt;code&gt;dbmon&lt;/code&gt; demo.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Screenshot of the dbmon/dbmonster stress test demo app." src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/dbmon-screenshot.png" style="background-color: transparent"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The dbbane of my existence.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now the focus has turned to initial render times, as people (rightfully) focus on improving the experience of users on lower-end mobile devices and networks. But there is a point at which you hit diminishing returns optimizing for the initial render while sacrificing update performance.&lt;/p&gt;

&lt;p&gt;Fundamentally, this is a tradeoff about bookkeeping. Do more bookkeeping upfront during initial render and subsequent renders can be better optimized. Do less bookkeeping and initial renders will be faster, but updating gets close to being a full re-render. There are other considerations like file size, eager vs. lazy parsing, optimizing for the JIT compiler, etc., but this accounts for most of the algorithmic performance differences.&lt;/p&gt;

&lt;p&gt;Due to the drop-in nature of the Glimmer upgrade, we knew we couldn&amp;#39;t regress on Ember&amp;#39;s world-class update performance, even as we worked to improve initial render performance. This required us to find an architecture that would strike the optimal balance between the two.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested in more of the details, and in particular how the Glimmer VM maintains better performance by default compared to Virtual DOM libraries as your UI scales, I highly recommend &lt;a href="http://yehudakatz.com/2017/04/05/the-glimmer-vm-boots-fast-and-stays-fast/"&gt;Yehuda&amp;#39;s blog post explaining the design decisions that helped us hit our performance targets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this is to say, Glimmer offers a novel approach to rendering component-based web UIs. It&amp;#39;s great that Ember users get to take advantage of it. But what about everyone else?&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-adoption'&gt;Ember Adoption&lt;/h2&gt;
&lt;p&gt;One of my favorite pastimes is watching videos of old Steve Jobs presentations. One I like in particular is his 1998 Macworld keynote, when he had only been back at Apple for a year. Apple was on the brink of failure, low on money and with warehouses full of unwanted computers. The press, mainstream and tech journalists alike, all used one word to describe Apple: &lt;em&gt;beleaguered&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When Steve showed up at Apple, he rapidly turned things around. The confusing product lineup was replaced with a simple-to-understand consumer/pro laptop/desktop matrix. They delivered the original, Bondi blue iMac, showing they still had the ability to deliver innovative new products.&lt;/p&gt;

&lt;p&gt;Despite this, it&amp;#39;s hard to turn around a narrative. The press would give a reason why Apple was doomed to fail, and when Apple would fix that problem, they would come up with a &lt;em&gt;new&lt;/em&gt; reason why Apple was doomed to fail.&lt;/p&gt;

&lt;p&gt;Borrowing from Maslow&amp;#39;s Hierarchy of Needs, Steve introduced the Apple Hierarchy of Skepticism:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/apple-hierarchy-of-skepticism.png" alt="Steve Jobs&amp;#39; Apple Hierarchy of Skepticism slide. Numbered 1 to 5, from bottom to top: Survival, Stable Business, Product Strategy, Applications, Growth. The Survival, Stable Business, and Product Strategy rows are colored orange to indicate that they&amp;#39;ve been overcome. Applications and Growth are colored blue to indicate that they are the next area Apple will focus on to persuade the skeptics."&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;When I came to Apple a year ago, all I heard was &amp;#39;Apple is dying, Apple can&amp;#39;t survive.&amp;#39; It turns out that every time we convince people we&amp;#39;ve accomplished something at one level, they come up with something new. And I used to think this was a bad thing. I thought, &amp;#39;Oh Jesus, when are they ever gonna believe that we&amp;#39;re gonna be able to turn this thing around?&amp;#39;&lt;/p&gt;

&lt;p&gt;But actually now I think it&amp;#39;s great! Because what it means is we&amp;#39;ve now convinced them that we&amp;#39;ve taken care of last month&amp;#39;s question. And they&amp;#39;re on to the next one! So I thought, let&amp;#39;s get ahead of the game, let&amp;#39;s figure out what all of the questions are gonna be, and map out where we are.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without being overly dramatic, I think there are some obvious parallels between the 90&amp;#39;s era Mac and Ember. While we have a fantastic community and high-profile, successful apps, it can feel like the momentum is somewhere else. And I know Ember users who have told me they feel beleaguered by this common reaction: &amp;quot;You use Ember? I thought React was the new thing?&amp;quot; I&amp;#39;ve even gotten it from my Lyft driver.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;.&lt;a href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt;: &amp;quot;...if it makes you feel better, my lyft driver just asked &amp;#39;isn&amp;#39;t ember dead and react is the new thing?&amp;#39;&amp;quot;&lt;/p&gt;&amp;mdash; Lady Zahra (@ZeeJab) &lt;a href="https://twitter.com/ZeeJab/status/847489050130788352"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;When I think about the reasons people give for not using Ember, there are some that used to be common that I never hear anymore. Those ugly &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the DOM and lack of documentation were two major knocks against Ember, but we&amp;#39;ve since eliminated the DOM noise and invested heavily in guides and API documentation. We convinced people that these weren&amp;#39;t a barrier anymore! But there are still lots of reasons people don&amp;#39;t want to take another look at Ember.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s introduce our own Ember Hierarchy of Skepticism:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/ember-hierarchy-of-skepticism.png" alt="Ember&amp;#39;s Hierarchy of Skepticism. From 1 to 5, bottom to top: Metamorph Tags / bindAttr, No Documentation, Custom Object Model, Big File Size, Monolithic. The first two are colored orange to indicate that they are objections that we have overcome."&gt;&lt;/p&gt;

&lt;p&gt;By far, the three most common remaining reasons I hear for not using Ember are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#39;s monolithic and hard to adopt incrementally.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s too big out of the box, particularly for mobile apps.&lt;/li&gt;
&lt;li&gt;The custom object model is scary. I want to write JavaScript, not whatever &lt;em&gt;that&lt;/em&gt; is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting today, we can focus on overcoming these last three barriers to Ember&amp;#39;s growth.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_introducing-glimmer-js'&gt;Introducing Glimmer.js&lt;/h2&gt;
&lt;p&gt;With &lt;a href="https://glimmerjs.com"&gt;Glimmer.js&lt;/a&gt;, we&amp;#39;ve extracted the rendering engine that powers Ember and made it available to everyone.&lt;/p&gt;

&lt;p&gt;Glimmer is just the component layer, so it&amp;#39;s up to you to decide if you need routing, a data layer, etc. If you want to drop Glimmer components into an existing app, it&amp;#39;s as simple as adding a Web Component.&lt;/p&gt;

&lt;p&gt;For a quick, five minute tour of what building a Glimmer app is like, check out this video from &lt;a href="https://embermap.com/"&gt;Ember Map&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/i2rwIApjz-4?ecver=1" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Or visit &lt;a href="https://glimmerjs.com"&gt;glimmerjs.com&lt;/a&gt; to get started and read the documentation.&lt;/p&gt;

&lt;p&gt;While extracting Glimmer to be used standalone from Ember, we also took the opportunity to clean up some of the API that people found most confusing when using Ember components.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_goodbye-tagname-attributebindings-etc'&gt;Goodbye tagName, attributeBindings, etc.&lt;/h3&gt;
&lt;p&gt;Tired of remembering all of the magic properties needed to configure a component&amp;#39;s root element?&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;tagName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;input&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;attributeBindings&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;type:kind&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="key"&gt;disabled&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;,
  &lt;span class="key"&gt;kind&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;range&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Glimmer, the component&amp;#39;s root element is defined in the template, so all of that goes away. (You can think of the component template now being &amp;quot;outer HTML&amp;quot; instead of &amp;quot;inner HTML&amp;quot;.) Here&amp;#39;s the same component in Glimmer, with just a template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;range&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_es6-classes'&gt;ES6 Classes&lt;/h3&gt;
&lt;p&gt;This gets even nicer once you introduce dynamic data from the component into it. Here&amp;#39;s the Ember component:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;tagName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;input&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;attributeBindings&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;disabled&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;type:kind&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;],
  &lt;span class="key"&gt;disabled&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;,
  &lt;span class="key"&gt;kind&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;range&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;classNameBindings&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;type&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;primary&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in a Glimmer component, using ES6 class syntax to provide dynamic data:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;disabled&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;range&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;type&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  type = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;primary&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_typescript'&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;Because Glimmer is written in TypeScript, it has great autocomplete and type definitions out of the box. And every new Glimmer app is configured to use TypeScript automatically.&lt;/p&gt;

&lt;p&gt;JavaScript is still the primary way to write Glimmer apps. Because it&amp;#39;s extracted from a JavaScript framework, Glimmer&amp;#39;s API has been designed to be used with JavaScript from the start. TypeScript is just an extra tool in your toolbelt—if you want it.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  &lt;span class="key"&gt;firstName&lt;/span&gt;: string;
  lastName: string;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_computed-properties'&gt;Computed Properties&lt;/h3&gt;
&lt;p&gt;Ember users love computed properties, but getting used to their syntax can be a challenge. Because Glimmer uses ES6 classes, you can use standard getters and setters:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  firstName = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Katie&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
  lastName = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Gengler&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

  get fullName() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;{&lt;span class="local-variable"&gt;this&lt;/span&gt;.firstName} &lt;span class="predefined"&gt;$&lt;/span&gt;{&lt;span class="local-variable"&gt;this&lt;/span&gt;.lastName}&lt;span class="error"&gt;`&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_decorators'&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Glimmer uses decorators (a Stage 2 TC39 proposal) to augment a class&amp;#39;s properties and methods. For example, to mark a component property as &amp;quot;tracked&amp;quot; (so changes to it are updated in the DOM), use the &lt;code&gt;@tracked&lt;/code&gt; decorator:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component, { tracked } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  &lt;span class="error"&gt;@&lt;/span&gt;tracked firstName;
  &lt;span class="error"&gt;@&lt;/span&gt;tracked lastName;

  &lt;span class="error"&gt;@&lt;/span&gt;tracked(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
  get fullName() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="error"&gt;`&lt;/span&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;{&lt;span class="local-variable"&gt;this&lt;/span&gt;.firstName} &lt;span class="predefined"&gt;$&lt;/span&gt;{&lt;span class="local-variable"&gt;this&lt;/span&gt;.lastName}&lt;span class="error"&gt;`&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_actions'&gt;Actions&lt;/h3&gt;
&lt;p&gt;Actions in Glimmer are just functions, with optional argument currying. Use the &lt;code&gt;{{action}}&lt;/code&gt; helper to bind the function to the component context:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component, { tracked } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  &lt;span class="error"&gt;@&lt;/span&gt;tracked name: string;

  setName(name: string) {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.name = name;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;onclick&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;setName&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;Zahra&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  Change Name
&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_no-code-get-code-code-set-code'&gt;No &lt;code&gt;.get()&lt;/code&gt;/&lt;code&gt;.set()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the above examples, you probably noticed that we never have to use the &lt;code&gt;.get()&lt;/code&gt; method to retrieve a component property, or &lt;code&gt;.set()&lt;/code&gt; to set one. This requirement frequently trips up new Ember users until they develop the right muscle memory. In Glimmer, we rely on ES5 getters and setters to intercept properties, so you never need to learn &lt;code&gt;.get()&lt;/code&gt; and &lt;code&gt;.set()&lt;/code&gt; at all.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_file-size'&gt;File Size&lt;/h2&gt;
&lt;p&gt;Web developers are rightfully sensitive to file size. Not only do your app&amp;#39;s dependencies need to be downloaded, JavaScript must be parsed and evaluated. Particularly on lower-end mobile devices, that can add up quickly.&lt;/p&gt;

&lt;p&gt;Ember has historically been larger in file size than its competitors. Our line of reasoning was: for the kinds of apps people build with Ember, that&amp;#39;s all code that you&amp;#39;ll eventually need to pull in anyways.&lt;/p&gt;

&lt;p&gt;Today, a hello world Ember app starts off with about 200KB of JavaScript. In my experience, most production Angular, Ember and React apps hover between 400KB to 700KB of JavaScript, sometimes more. (Sometimes a lot more.)&lt;/p&gt;

&lt;p&gt;While this is true of many apps, it&amp;#39;s not &lt;em&gt;universally&lt;/em&gt; true. Sometimes people have hard file size requirements that disqualify Ember out of the gate. And when people are starting out on a greenfield app, it&amp;#39;s hard for them to buy on faith that they will eventually need everything Ember offers. What if they don&amp;#39;t? It feels safer to start small and bring things in piecemeal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/javascript-framework-battle-hello-world-in-each-cli-"&gt;Shane Osbourne recently compared the file size of a &amp;quot;hello world&amp;quot; app generated by each of the major frameworks&amp;#39; CLI tools.&lt;/a&gt; While Ember is the largest, a Glimmer app is tiny: at 34KB, it&amp;#39;s smaller than React, Angular and Vue. Only Preact comes in smaller.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/hello-world-cli-size.png" alt="Chart showing relative file sizes of the default output from creating a new app with different frameworks&amp;#39; CLI tools. Ember is the largest at 198KB. Preact is the smallest at 8.8KB. Second smallest is Glimmer at 34KB. Vue, React and Angular weigh in at 43.8KB, 46KB and 92KB respectively."&gt;&lt;/p&gt;

&lt;p&gt;Best of all, we haven&amp;#39;t yet begun to focus on bundle optimization. You can expect this size to decrease even more in the future.&lt;/p&gt;

&lt;p&gt;So that&amp;#39;s Glimmer.js. It&amp;#39;s tiny, it&amp;#39;s fast, and it can be adopted incrementally. Best of all, you can start playing with it today.&lt;/p&gt;

&lt;p&gt;But… where does that leave Ember?&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_back-to-ember'&gt;Back to Ember&lt;/h2&gt;
&lt;p&gt;We believe that the key to balancing stability and progress in Ember is to make it easy to do experimentation outside of the framework. The only way to truly get a sense of something is to be able to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Glimmer components are the future of components in Ember.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We want to let you—and everyone—get a chance to use Glimmer components before we make them an official part of Ember. But we&amp;#39;re not leaving Ember users out in the cold until that happens.&lt;/p&gt;

&lt;p&gt;A few weeks before EmberConf, &lt;a href="https://github.com/emberjs/rfcs/pull/213"&gt;Godfrey Chan submitted the &amp;quot;Custom Component API&amp;quot; RFC&lt;/a&gt;. This RFC is the key to bringing Glimmer components to Ember apps. Because the Glimmer VM is really a &amp;quot;library for writing component libraries,&amp;quot; we can let addons specify their own custom component API.&lt;/p&gt;

&lt;p&gt;Notably, this means we&amp;#39;re working on making it possible to use the Glimmer components you&amp;#39;ve seen above in your existing Ember apps, just by installing an addon.&lt;/p&gt;

&lt;p&gt;Best of all, Glimmer apps use the Module Unification filesystem layout. This is the link between the Ember and Glimmer worlds. If you decide you actually &lt;em&gt;do&lt;/em&gt; need all of the functionality Ember offers, you will be able to drag and drop your Glimmer components into an Ember app.&lt;/p&gt;

&lt;p&gt;One last thing. If you take a peek under the hood of a new Glimmer app, you&amp;#39;ll see that it&amp;#39;s made up of a few different npm packages, like &lt;code&gt;@glimmer/application&lt;/code&gt;, &lt;code&gt;@glimmer/di&lt;/code&gt;, etc. We spent time making sure these packages follow modern best practices for distributing JavaScript in 2017.&lt;/p&gt;

&lt;p&gt;Much of the secret sauce of a Glimmer app is in the ahead-of-time compilation we do with Rollup, so I recommend most people use the default Ember CLI flow documented on the website. That said, there&amp;#39;s no stopping an enterprising developer from using these packages in other environments. Let experimentation reign!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-in-2017'&gt;Ember in 2017&lt;/h2&gt;
&lt;p&gt;While we&amp;#39;re excited about Glimmer, work on Ember is not slowing down. If anything, the focus on exposing capabilities means that the pace of community experimentation should noticeably tick upwards.&lt;/p&gt;

&lt;p&gt;Module Unification for Ember apps is &lt;a href="https://github.com/ember-cli/ember-resolver/pull/182"&gt;under active development&lt;/a&gt;. We&amp;#39;re applying the lessons we learned and are working to expose the primitives needed to be able to implement the Module Unification filesystem layout in an addon. Development is happening on the master branch of &lt;code&gt;ember-resolver&lt;/code&gt; &lt;a href="https://github.com/ember-cli/ember-resolver#current-feature-flags"&gt;behind a feature flag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we upstream Glimmer.js code into Ember, this gives us a great excuse to &lt;a href="https://github.com/emberjs/ember.js/issues/15058"&gt;clean up older tests&lt;/a&gt; so that we can easily run them against the old and new implementation, as we did with rendering tests and Glimmer VM integration.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve also begun to &lt;a href="https://github.com/emberjs/ember.js/pull/14805"&gt;implement a routing service&lt;/a&gt; that gives applications and addons imperative control over the router. This is exciting because, previously, routing-related features like the built-in &lt;code&gt;{{link-to}}&lt;/code&gt; helper relied on private API. With the routing service, developers will have the tools to build their own &lt;code&gt;{{link-to}}&lt;/code&gt; helper if they wish.&lt;/p&gt;

&lt;p&gt;Long term, our goal is to break Ember apart into a series of small modules. Each piece of Ember should be an npm package that you can remove if you don&amp;#39;t need it.&lt;/p&gt;

&lt;p&gt;(Unlike most small modules approaches, of course, things will &amp;quot;just work&amp;quot; together if you &lt;em&gt;do&lt;/em&gt; need them. We remain strongly opposed to forcing integration work onto application developers.)&lt;/p&gt;

&lt;p&gt;It should also work in reverse: if you start with Glimmer and realize you actually do need a router, services, a data layer, etc., you should be able to incrementally &lt;code&gt;npm install&lt;/code&gt; your way to Ember.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-04-05-emberconf-2017-state-of-the-union/spectrum-of-app-complexity.png" alt="Diagram showing a spectrum from less complext to more complex. On the left side is Glimmer logo for less complex applications. On the right side is Ember, for ambitious applications. In the middle is a sequence of npm install commands that show how you can move incrementally up the scale, one package at a time: npm install @ember/router, npm install @ember/service, and npm install @ember data."&gt;&lt;/p&gt;

&lt;p&gt;This is the future we&amp;#39;ve always dreamed of for Ember: a complete, cohesive front-end stack for those who want it, with the ability to quickly pare it down if the need arises.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re not there quite yet, but it&amp;#39;s an exciting goal to build toward and I think we&amp;#39;ve shown tangible progress already with Glimmer. I hope you are as excited about Ember and Glimmer as we are, and we can&amp;#39;t wait to see all of the cool stuff you build with them!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.12 and 2.13 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/03/19/ember-2-12-released.html"/>
    <id>http://emberjs.com/blog/2017/03/19/ember-2-12-released.html</id>
    <published>2017-03-19T00:00:00+00:00</published>
    <updated>2017-03-19T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.12.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.13 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.12.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 2.13 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report
any bugs before they are published as a final release in six weeks&amp;#39; time. The
&lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to
continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-12'&gt;Changes in Ember.js 2.12&lt;/h3&gt;
&lt;p&gt;The
2.12.0 release is an Ember.js Long-Term Support candidate. In six weeks, the 2.12.x series
will become the latest LTS release and six weeks after that the 2.8 LTS branch
will no longer receive bugfix patches.&lt;/p&gt;

&lt;p&gt;For more information about Ember&amp;#39;s LTS policies, see the
&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;announcement blog
post&lt;/a&gt; and
&lt;a href="http://emberjs.com/builds/"&gt;builds page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ember 2.12 implements the &lt;code&gt;factoryFor&lt;/code&gt; API as described in &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0150-factory-for.md"&gt;RFC #150&lt;/a&gt;.
This public API replaces the intimate API of &lt;code&gt;_lookupFactory&lt;/code&gt;, and additionally
discourages developers from setting properties on classes returned from the
container. For more information about this API see the &lt;a href="http://emberjs.com/api/classes/ContainerProxyMixin.html#method_factoryFor"&gt;API
docs&lt;/a&gt;
and &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_migrating-from-_lookupfactory-to-factoryfor"&gt;&lt;code&gt;_lookupFactory&lt;/code&gt; deprecation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Addon authors and others should consider if the
&lt;a href="https://github.com/rwjblue/ember-factory-for-polyfill"&gt;ember-factory-for-polyfill&lt;/a&gt;
addon can help them avoid the deprecation warning for &lt;code&gt;_lookupFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, this release of Ember contains an incremental performance
improvement for the Glimmer rendering engine (you may have seen it
referred to as the &amp;quot;binary VM&amp;quot;). By avoiding runtime
compilation of syntax objects, initial rendering performance will benefit.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-2-12'&gt;Deprecations in Ember 2.12&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Ember.K&lt;/code&gt; utility function is deprecated per &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0178-deprecate-ember-k.md"&gt;RFC #178&lt;/a&gt;.
See the &lt;a href="http://emberjs.com/deprecations/v2.x/#toc_code-ember-k-code"&gt;deprecation guide&lt;/a&gt;
and pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14751"&gt;#14751&lt;/a&gt;
for additional details.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments to the component lifecycle hooks of &lt;code&gt;didInitAttrs&lt;/code&gt;, &lt;code&gt;didReceiveAttrs&lt;/code&gt;, and &lt;code&gt;didUpdateAttrs&lt;/code&gt;
are deprecated. These arguments were private and undocumented. Please see
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0191-deprecate-component-lifecycle-hook-args.md"&gt;RFC #191&lt;/a&gt;
for further context and discussion.
Please note that
this only deprecates the usage of the arguments passed to this hook, not the
hooks themselves. See pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14711"&gt;#14711&lt;/a&gt;
for additional details.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember.js 2.12, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.12.0"&gt;Ember.js 2.12.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-13'&gt;Upcoming Changes in Ember.js 2.13&lt;/h3&gt;
&lt;p&gt;Building on the addition of &lt;code&gt;factoryFor&lt;/code&gt; in Ember 2.12, Ember 2.13 will change
the way dependency injection is implemented in the framework. Until 2.12,
dependencies were injected onto an instance using &lt;code&gt;extend&lt;/code&gt; to create a subclass.
This created an excessive number of subclasses during the execution of an
application. In Ember 2.13 injections will be passed to an object via &lt;code&gt;create&lt;/code&gt;
during instantiation. This results in a notable performance improvement
that grows in impact with the complexity of an application.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0150-factory-for.md"&gt;RFC #150&lt;/a&gt;
and pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14360"&gt;#14360&lt;/a&gt; for
more details about this change.&lt;/p&gt;

&lt;p&gt;Additionally, this release contains a further refinement on the &amp;quot;binary VM&amp;quot;
change landed in 2.12. By using integers for common Glimmer wire-format strings,
compiled template sizes in 2.13 will see an incremental size reduction.&lt;/p&gt;

&lt;p&gt;In addition to these and other improvements, several changes arising
from the &lt;a href="https://github.com/emberjs/rfcs"&gt;RFC&lt;/a&gt; process have been implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/rfcs/issues/146"&gt;RFC issue #146&lt;/a&gt; advocated for the
addition of &lt;code&gt;resumeTest&lt;/code&gt; as a compliment to &lt;code&gt;pauseTest&lt;/code&gt;. This was implemented
in &lt;a href="https://github.com/emberjs/ember.js/pull/13663"&gt;#13663&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0186-track-unique-history-location-state.md"&gt;RFC #186&lt;/a&gt;
describes the addition of &lt;code&gt;uuid&lt;/code&gt; as a property on &lt;code&gt;HistoryLocation&lt;/code&gt; adapters
for the router. This addition makes it possible to track scroll locations
to a point in browsing history. See pull request &lt;a href="https://github.com/emberjs/ember.js/pull/14011"&gt;#14011&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 2.13, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.13.0-beta.1"&gt;Ember.js 2.13.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-12'&gt;Changes in Ember Data 2.12&lt;/h3&gt;
&lt;p&gt;Ember Data 2.12 represents the work of 19 direct contributors
and over 90 commits.&lt;/p&gt;

&lt;p&gt;Ember Data 2.12 continues to reflect our focus on performance improvements, and
we are happy to report this is the fastest release of Ember Data yet.&lt;/p&gt;

&lt;p&gt;A new &lt;code&gt;serializeId()&lt;/code&gt; method has been added to &lt;code&gt;JSONSerializer&lt;/code&gt;,
&lt;code&gt;RESTSerializer&lt;/code&gt; and &lt;code&gt;JSONAPISerializer&lt;/code&gt;. This is useful if you are
working with a backend that requires your ids to be something other
than a string. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;app/serializers/application.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.JSONSerializer.extend({
  serializeId(snapshot, json, primaryKey) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; id = snapshot.id;
    json[primaryKey] = parseInt(id, &lt;span class="integer"&gt;10&lt;/span&gt;);
   }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For more information see the &lt;a href="http://emberjs.com/api/data/classes/DS.JSONSerializer.html#method_serializeId"&gt;&lt;code&gt;serializeId&lt;/code&gt; API
docs&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-12'&gt;Deprecations in Ember Data 2.12&lt;/h4&gt;
&lt;p&gt;Ember Data 2.12 contains no new deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember Data 2.12, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.12.0"&gt;Ember Data 2.12.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-data-2-13'&gt;Upcoming changes in Ember Data 2.13&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ds-extended-errors&lt;/code&gt; (&lt;a href="https://github.com/emberjs/data/pull/3586"&gt;#3586&lt;/a&gt; &lt;a href="https://github.com/emberjs/data/pull/4287"&gt;#4287&lt;/a&gt;) feature has been enabled on the beta branch for Ember Data 2.13.&lt;/p&gt;

&lt;p&gt;This feature introduces an &lt;code&gt;extend&lt;/code&gt; method on errors which allows
users to create their own custom errors that extend from
&lt;code&gt;DS.AdapterError&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;const MyCustomError = DS.AdapterError.extend({ &lt;span class="key"&gt;message&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;My custom error.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The feature also introduces some new errors to rest adapter which will
be used to reject the adapter promises based on http status of the API
response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[401] &lt;code&gt;DS.UnauthorizedError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[403] &lt;code&gt;DS.ForbiddenError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[404] &lt;code&gt;DS.NotFoundError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[409] &lt;code&gt;DS.ConflictError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[500] &lt;code&gt;DS.ServerError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/tchak"&gt;tchak&lt;/a&gt; and
&lt;a href="https://github.com/tchak"&gt;twokul&lt;/a&gt; for their work on this feature and
&lt;a href="https://github.com/lindyhopchris"&gt;lindyhopchris&lt;/a&gt; for his help
documenting the feature.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 2.13, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.13.0-beta.1"&gt;Ember Data 2.13.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data! To upgrade
your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the
upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project directory to apply the
blueprint changes. You can preview those changes for &lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.11.0...v2.12.0"&gt;applications&lt;/a&gt;
and &lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.11.0...v2.12.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-12'&gt;Changes in Ember CLI 2.12&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_switch-to-eslint'&gt;Switch to ESLint&lt;/h4&gt;
&lt;p&gt;Ember CLI will now generate new projects with an ESLint setup. This changes the default linting system from JSHint (which has been used
since we initially added linting support to Ember CLI) to ESLint. The new project setup uses a fairly simple &lt;code&gt;.eslinrc.js&lt;/code&gt; relying
largely on ESLint&amp;#39;s own &lt;code&gt;recommended&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using JSHint in projects and addons generated by prior versions of Ember CLI is still supported, but we recommend that you update to
ESLint as you upgrade your project and addons to newer Ember CLI versions.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_reduced-dependencies'&gt;Reduced Dependencies&lt;/h4&gt;
&lt;p&gt;In order to avoid inconsistencies and issues due to supporting many &lt;code&gt;npm&lt;/code&gt; client versions, Ember CLI has had &lt;code&gt;npm&lt;/code&gt; as a dependency
for quite some time. This is used for both &lt;code&gt;ember new foo&lt;/code&gt; (to initially install dependencies for a newly generated application) and
to install packages via &lt;code&gt;ember install ember-cli-template-lint&lt;/code&gt; (to install the addon specified). Having &lt;code&gt;npm&lt;/code&gt; as a dependency
introduces roughly 19MB to a freshly generated application&amp;#39;s &lt;code&gt;node_modules&lt;/code&gt; size. As the &lt;code&gt;npm&lt;/code&gt; client has become more stable (3.x series and
newer) this has seemed more and more wasteful.&lt;/p&gt;

&lt;p&gt;Starting with Ember CLI 2.12, &lt;code&gt;npm&lt;/code&gt; is no longer a dependency. If a suitable version of &lt;code&gt;npm&lt;/code&gt; is present on the system,
it will be used. If &lt;code&gt;npm&lt;/code&gt; is not found, or a version older than &lt;code&gt;3.0.0&lt;/code&gt; is found, Ember CLI will emit an error when you run commands that would utilize
&lt;code&gt;npm&lt;/code&gt; (e.g. &lt;code&gt;ember install&lt;/code&gt;, &lt;code&gt;ember new&lt;/code&gt;, &lt;code&gt;ember addon&lt;/code&gt;, &lt;code&gt;ember init&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Similarly, Ember CLI had a dependency on &lt;code&gt;bower&lt;/code&gt; in order to support the &lt;code&gt;bower install&lt;/code&gt; phase while generating new projects and installing
addons.
As of Ember CLI 2.11 a new application has no dependencies via &lt;code&gt;bower.json&lt;/code&gt;. This means the dependency on &lt;code&gt;bower&lt;/code&gt; itself is also potential bloat.
Having &lt;code&gt;bower&lt;/code&gt;
as a dependency added roughly 21MB to a new application&amp;#39;s total &lt;code&gt;node_modules&lt;/code&gt; size. In Ember CLI 2.12, bower is only added as a dependency if a command
requires &lt;code&gt;bower&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Combined, these changes result in a &lt;code&gt;node_modules&lt;/code&gt; size reduction of approximately 40MB for newly generated applications.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ember-data&lt;/code&gt; has been removed from the addon blueprint.&lt;/li&gt;
&lt;li&gt;Properly call &lt;code&gt;preprocessTree&lt;/code&gt; / &lt;code&gt;postprocessTree&lt;/code&gt; for addons.&lt;/li&gt;
&lt;li&gt;Split serving assets into separate internal addons. This enables work to push ember-cli-fastboot towards 1.0.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.12 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.12.0"&gt;Ember CLI 2.12.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-13'&gt;Upcoming Changes in Ember CLI 2.13&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_add-support-for-using-code-yarn-code'&gt;Add support for using &lt;code&gt;yarn&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Ember CLI projects have been able to utilize &lt;code&gt;yarn&lt;/code&gt; for dependency management for quite some time, however it was not well supported by
the default generators. In 2.13 Ember CLI is now &amp;quot;yarn aware&amp;quot;, and will use &lt;code&gt;yarn&lt;/code&gt; for tasks such as &lt;code&gt;ember install&lt;/code&gt; if it detects that
&lt;code&gt;yarn&lt;/code&gt; is installed and a &lt;code&gt;yarn.lock&lt;/code&gt; exists in the project. You can even instruct &lt;code&gt;ember new&lt;/code&gt; to generate a new project with a &lt;code&gt;yarn.lock&lt;/code&gt;
for you via &lt;code&gt;ember new foo --yarn&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_enable-instrumentation-hooks'&gt;Enable Instrumentation Hooks&lt;/h4&gt;
&lt;p&gt;Ember CLI has had the ability to generate custom instrumentation output for builds for a few years now (introduced on 2015-08-24), but
this information has not been readily accessible. In 2.13 ember-cli exposes this information to addons that implement the &lt;code&gt;instrumentation&lt;/code&gt;
hook. This allows addons to access many things that were previously very difficult (e.g. reliable build time reporting).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/hjdivad"&gt;@hjdivad&lt;/a&gt; for proposing and implementing this feature. Please read through &lt;a href="https://github.com/ember-cli/rfcs/blob/master/complete/0091-addon-instrumentation-experimental-hooks.md"&gt;the RFC&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_targets'&gt;Targets&lt;/h4&gt;
&lt;p&gt;In order to allow addons to understand the desired target platforms of the app that they are operating in, a new file has been added
to all generated projects: &lt;code&gt;config/targets.js&lt;/code&gt;. This file exposes the supported targets so that tooling such as &lt;a href="https://github.com/postcss/autoprefixer"&gt;autoprefixer&lt;/a&gt; 
and &lt;a href="https://github.com/babel/babel-preset-env"&gt;babel-preset-env&lt;/a&gt; can properly understand the level of transpilation that is needed.&lt;/p&gt;

&lt;p&gt;The default &lt;code&gt;config/targets.js&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;module.exports = {
  &lt;span class="key"&gt;browsers&lt;/span&gt;: [
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ie 9&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last 1 Chrome versions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last 1 Firefox versions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last 1 Safari versions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  ]
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The target information is exposed to addons via &lt;code&gt;this.project.targets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/cibernox"&gt;@cibernox&lt;/a&gt; for proposing and implementing this feature. Please read through &lt;a href="https://github.com/ember-cli/rfcs/blob/master/complete/0095-standardise-targets.md"&gt;the RFC&lt;/a&gt;
for more insight.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_babel-6'&gt;Babel 6&lt;/h4&gt;
&lt;p&gt;Babel 6 was introduced on stage during EmberCamp London way back on 2015-10-29. However, Ember CLI and its ecosystem
have continued to use the aging and nearly unsupported Babel 5. Babel 6 was a massive shift for Babel and the migration posed quite a
challenge for ember-cli.&lt;/p&gt;

&lt;p&gt;After much work, Babel 6 support has been added to Ember CLI internally and for newly generated projects (both applications and addons).
The latest beta of &lt;code&gt;ember-cli-babel@6&lt;/code&gt; takes advantage of the new &lt;code&gt;project.targets&lt;/code&gt; API along with &lt;a href="https://github.com/babel/babel-preset-env"&gt;&lt;code&gt;babel-preset-env&lt;/code&gt;&lt;/a&gt;
to allow applications to have significantly better control of exactly what is transpiled. &lt;code&gt;babel-preset-env&lt;/code&gt; utilizes the &lt;a href="http://caniuse.com/"&gt;caniuse&lt;/a&gt; and
&lt;a href="https://github.com/kangax"&gt;@kangax&lt;/a&gt;&amp;#39;s &lt;a href="https://kangax.github.io/compat-table/es6/"&gt;ES6 compatibility database&lt;/a&gt; to know which features are available natively and which
require transpilation. For example, with the proper targets configuration &lt;code&gt;ember-cli-babel&lt;/code&gt; will no longer transpile &lt;code&gt;const&lt;/code&gt; / &lt;code&gt;let&lt;/code&gt;, 
&lt;code&gt;() =&amp;gt; { }&lt;/code&gt; functions, &lt;code&gt;class&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The work done in &lt;code&gt;ember-cli-babel&lt;/code&gt; allows both &lt;code&gt;ember-cli-babel@5&lt;/code&gt; and &lt;code&gt;ember-cli-babel@6&lt;/code&gt; to coexist peacefully, so it is safe for addon authors
to begin updating their internal &lt;code&gt;ember-cli-babel&lt;/code&gt; dependency so that applications can take advantage of more of these &lt;code&gt;babel@6&lt;/code&gt; features.&lt;/p&gt;

&lt;p&gt;Please test your applications and addons with &lt;code&gt;ember-cli-babel@6&lt;/code&gt; and report any issues you encounter. Due to the large number of changes required 
internally, we would like a larger than normal beta testing base to ensure things are as stable as possible before 2.13.0 is released.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower.json&lt;/code&gt; is no longer included in a newly generated project.&lt;/li&gt;
&lt;li&gt;Fix command interruption issues on windows.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;filesToRemove&lt;/code&gt; property for custom blueprints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.13.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.13.0-beta.1"&gt;Ember CLI 2.13.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. We are extremely grateful to our
contributors for their efforts.&lt;/p&gt;
</content>
  </entry>
</feed>
