<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ember Blog</title>
  <subtitle>Ember News and Updates</subtitle>
  <id>http://emberjs.com/blog</id>
  <link href="http://emberjs.com/blog"/>
  <link href="http://emberjs.com/blog/feed.xml" rel="self"/>
  <updated>2018-02-14T00:00:00+00:00</updated>
  <author>
    <name>Ember</name>
  </author>
  <entry>
    <title>Ember 3.0 Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2018/02/14/ember-3-0-released.html"/>
    <id>http://emberjs.com/blog/2018/02/14/ember-3-0-released.html</id>
    <published>2018-02-14T00:00:00+00:00</published>
    <updated>2018-02-14T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 3.0.0 of Ember.js, Ember Data, and
Ember CLI. Ember 3.0 doesn't introduce any new functionality, instead it focuses
the framework by removing long-deprecated APIs and support for legacy platforms.
Our plans...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 3.0.0 of Ember.js, Ember Data, and
Ember CLI. Ember 3.0 doesn&amp;#39;t introduce any new functionality, instead it focuses
the framework by removing long-deprecated APIs and support for legacy platforms.
Our plans for Ember 3.0 were announced in October 2017 in &lt;a href="https://www.emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html"&gt;The Road to Ember
3.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re committed to giving every Ember codebase a path into the 3.x series.  With
this goal in mind, we froze API deprecations targeting Ember 3.0 back in July
2017 (Ember 2.14). We&amp;#39;ve provided a detailed &lt;a href="https://www.emberjs.com/deprecations/v2.x/"&gt;deprecation
guide&lt;/a&gt; for all APIs removals, and
additionally extracted most of the features removed in 3.0 into an addon.&lt;/p&gt;

&lt;p&gt;This blog post will help you understand what is being removed in 3.0 and what
migration strategies are available. If you&amp;#39;re interested in trying Ember for the
first time today, get started by running:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt; yarn global add ember-cli # Or npm install -g ember-cli
&amp;gt; ember new my-project
&amp;gt; cd my-project
&amp;gt; ember serve # Then visit http://localhost:4200
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Additionally, today the 3.1 beta cycle begins for these same projects. We&amp;#39;ve
split out the beta release details into a separate forthcoming post to keep this
one focused on app migration steps and guidance.&lt;/p&gt;

&lt;p&gt;Finally, today we&amp;#39;re also promoting Ember 2.18 to LTS (&lt;a href="/blog/2018/01/01/ember-2-18-released.html"&gt;2.18 release
post&lt;/a&gt;). This is the last release of
Ember with support for IE9, IE10, PhantomJS, and for use via Bower. Per our LTS
policy, it will be supported with bug fixes for the next 5 release cycles
(September 2018) and security patches for the next 9 cycles (February 2019).&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_browser-support-in-3-0'&gt;Browser Support in 3.0&lt;/h3&gt;
&lt;p&gt;Ember 3.0 (including Ember.js, Ember Data, and Ember CLI) drops support for
Internet Explorer 9, IE 10, and PhantomJS. If you still require support for
these browsers, Ember 2.18-LTS will be supported with bug fixes until September
2018 and security fixes until February 2019 in alignment with our &lt;a href="/blog/2016/02/25/announcing-embers-first-lts.html#toc_the-lts-release-process"&gt;LTS
policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If your application requires support for these browsers and you would like to
eventually adopt Ember 3.x, we encourage you to use the LTS window to plan a
transition for your users in the coming months.&lt;/p&gt;

&lt;p&gt;The first LTS of Ember 3.x will be Ember 3.4. Any migration steps we describe
for moving between Ember 2.18 and 3.0 will also apply to 2.18-LTS and 3.4-LTS.&lt;/p&gt;

&lt;p&gt;For further details about this decision see &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0252-browser-support-changes.md"&gt;RFC #252&lt;/a&gt;
and &lt;a href="https://www.emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html#toc_browser-support-in-3-0"&gt;The Road to Ember 3.0: Browser Support in
3.0&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_global-build-and-bower-support-in-3-0'&gt;Global Build and Bower Support in 3.0&lt;/h3&gt;
&lt;p&gt;Ember 3.0 completes a re-orientation of the project away from script tag driven
development. This follows a general trend in JavaScript, where frameworks and
applications have embraced ahead of time (AOT) compilation to improve
performance and development experience (DX).&lt;/p&gt;

&lt;p&gt;Nearly all Ember applications already use Ember CLI for development, and most
also use Ember CLI addons to bring in libraries and build-time features. As of
their 3.0 releases, both Ember.js and Ember Data are only available as Ember CLI
addons. This makes the codebases easier to maintain, and allows improvements we
make to Ember&amp;#39;s packaging to apply to 3rd party addons.&lt;/p&gt;

&lt;p&gt;The legacy, script tag driven use of Ember via a &amp;quot;globals&amp;quot; build is removed in
3.0.&lt;/p&gt;

&lt;p&gt;Builds of Ember.js and Ember Data for use with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag are no longer
published as of 3.0. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Builds published to Bower as &lt;code&gt;components/ember&lt;/code&gt; and &lt;code&gt;components/ember-data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Builds published to S3, for example at
&lt;code&gt;http://builds.emberjs.com/release/shas/1f05c15cfc6d9df5882f9ff7cc985f50fe68f98f/ember.min.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Builds published to CDNs, for example at
&lt;code&gt;https://cdnjs.cloudflare.com/ajax/libs/ember.js/2.16.2/ember.debug.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead applications should make Ember a dependency via NPM or Yarn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ember-source&lt;/code&gt; is the Ember NPM package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember-data&lt;/code&gt; is the Ember Data NPM package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most applications should already be using these packages. An exception is that
many addons (and some applications) use ember-try to test against multiple
versions of Ember, and may reference the Bower builds for testing beta and canary
releases.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve started published tarballs containing the NPM package for each commit to
Ember.js and Ember Data. This allows you to migrate an addon&amp;#39;s ember-try
configuration away from Bower. The
&lt;a href="https://github.com/ember-cli/ember-source-channel-url"&gt;ember-source-channel-url&lt;/a&gt;
addon provides an API for fetching the appropriate URL for a given channel.
The latest version of Ember CLI&amp;#39;s addon blueprint uses this API out of the box,
so most addons simply need to upgrade to Ember CLI 3.0 to complete their move
away from Bower.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changes-in-ember-js-3-0'&gt;Changes in Ember.js 3.0&lt;/h2&gt;
&lt;hr&gt;

&lt;p&gt;Ember.js is the core of the Ember framework. It provides routing, rendering, and
dependency injection features.&lt;/p&gt;

&lt;p&gt;Ember.js 3.0 introduces no new public API or deprecations. Instead, it is
comprised of bug fixes and the removal of previously deprecated public API from
the 2.x cycle. This release drops support for IE9, IE10, PhantomJS, and Bower.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_updates-to-the-testing-defaults'&gt;Updates to the Testing Defaults&lt;/h3&gt;
&lt;p&gt;In Ember 3.0 we&amp;#39;ve changed the default blueprint for generated tests to use the
new testing API specified in &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0232-simplify-qunit-testing-api.md"&gt;RFC #232&lt;/a&gt;
and &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0268-acceptance-testing-refactor.md"&gt;RFC #268&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the final documentation for these test helpers at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember-test-helpers/blob/master/API.md"&gt;github.com/emberjs/ember-test-helpers/blob/master/API.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And additionally the &lt;a href="https://guides.emberjs.com/v3.0.0/testing/"&gt;Ember.js Testing
Guides&lt;/a&gt; have been updated.&lt;/p&gt;

&lt;p&gt;The testing API available in previous Ember releases remains supported and
un-deprecated in 3.0. If you would like to migrate tests using the old APIs
to the new API, upgrade Ember CLI and Ember then run the
&lt;a href="https://github.com/rwjblue/ember-qunit-codemod"&gt;ember-qunit-codemod&lt;/a&gt; script to
automate most of the change.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_computed-property-getter-assertion'&gt;Computed Property Getter Assertion&lt;/h3&gt;
&lt;p&gt;Ember&amp;#39;s computed property system requires the use of the &lt;code&gt;.get(&lt;/code&gt; method to read
the value of a computed property. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;emberObject.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;someComputedProperty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// returns the value&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In some cases, application code may have
incorrectly been relying on the presence of a value for the property itself,
for example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;emberObject.someComputedProperty; &lt;span class="comment"&gt;// an instance of ComputedPropertyDescriptor&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The return value in this case is not the computed property&amp;#39;s value, but an
instance of an internal Ember class.&lt;/p&gt;

&lt;p&gt;In Ember 3.0 reading a computed property without using &lt;code&gt;get&lt;/code&gt; will cause an
assertion failure in development. This addition of this assertion will help
applications correct their currently incorrect usage, and in later 3.x releases
allow us to remove the requirement to use &lt;code&gt;get&lt;/code&gt; to read a computed property&amp;#39;s
value.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_apis-removed-in-3-0'&gt;APIs Removed in 3.0&lt;/h3&gt;
&lt;p&gt;Below we&amp;#39;ve listed some of the most significant API removals in Ember.js 3.0.
For a more in-depth summary see &lt;a href="/blog/2017/10/03/the-road-to-ember-3-0.html#toc_apis-removed-in-ember-js-3-0"&gt;The Road to Ember 3.0: APIs Removed in Ember.js
3.0&lt;/a&gt;,
and for an exhaustive list of removals, see the &lt;a href="/deprecations/v2.x/"&gt;Ember.js 2.x deprecation
guide&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;{{render}}&lt;/code&gt; helper has been removed. Any remaining usage should be
&lt;a href="/deprecations/v2.x/#toc_code-render-code-helper"&gt;migrated to components&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;didInitAttrs&lt;/code&gt; is removed and can be &lt;a href="/deprecations/v2.x/#toc_ember-component-didinitattrs"&gt;replaced with &lt;code&gt;init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Declaring an observer with dependent keys after the callback is removed. Dependent keys should be passed before the callback as described in the &lt;a href="/api/ember/2.17/classes/@ember%2Fobject/methods/observer?anchor=observer"&gt;API docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumerable#contains&lt;/code&gt; and &lt;code&gt;Array#contains&lt;/code&gt; methods are removed. Instead usage should be &lt;a href="/deprecations/v2.x/#toc_enumerable-contains"&gt;replaced with &lt;code&gt;includes&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{link-to}}&lt;/code&gt; unwrapped the &lt;code&gt;model&lt;/code&gt; property from passed controllers. This
behavior has been removed.&lt;/li&gt;
&lt;li&gt;Specifying &lt;code&gt;defaultLayout&lt;/code&gt; on a component rather than &lt;a href="/deprecations/v2.x/#toc_ember-component-defaultlayout"&gt;&lt;code&gt;layout&lt;/code&gt;&lt;/a&gt; has been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.Handlebars.SafeString&lt;/code&gt; has been removed. Instead, use &lt;a href="/deprecations/v2.x/#toc_use-ember-string-htmlsafe-over-ember-handlebars-safestring"&gt;&lt;code&gt;Ember.String.htmlSafe&lt;/code&gt;&lt;/a&gt; or the &lt;code&gt;import { htmlSafe } from &amp;#39;@ember/string&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.K&lt;/code&gt; has been removed. Usage should be replaced with &lt;a href="/deprecations/v2.x/#toc_deprecations-added-in-2-12"&gt;inline functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for legacy initializers with two arguments (container, application)
has been removed in favor of
&lt;a href="/deprecations/v2.x/#toc_initializer-arity"&gt;a single argument of &lt;code&gt;application&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ember&amp;#39;s legacy binding system, including &lt;code&gt;Ember.Binding&lt;/code&gt; and the &lt;code&gt;fooBinding&lt;/code&gt;
micro-syntax. See the &lt;a href="/deprecations/v2.x/#toc_ember-binding"&gt;migration guide&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;Ember&amp;#39;s &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;MapWithDefault&lt;/code&gt;, and &lt;code&gt;OrderedSet&lt;/code&gt; classes. These should be
replaced with native features or with implementations from other libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember.js 3.0, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v3.0.0"&gt;Ember.js 3.0.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changes-in-ember-data-3-0'&gt;Changes in Ember Data 3.0&lt;/h2&gt;
&lt;hr&gt;

&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;

&lt;p&gt;Ember Data 3.0 contains small bug fixes and updated test generators for the new
testing APIs. Additionally this release removes previously deprecated APIs.&lt;/p&gt;

&lt;p&gt;Below we&amp;#39;ve listed some of the most significant API removals in Ember Data 3.0.
For a more in-depth summary see &lt;a href="/blog/2017/10/03/the-road-to-ember-3-0.html#toc_apis-removed-in-ember-data-3-0"&gt;The Road to Ember 3.0: APIs Removed in Ember
Data
3.0&lt;/a&gt;,
and for an exhaustive list of removals, see the &lt;a href="/deprecations/ember-data/v2.x/"&gt;Ember Data 2.x deprecation
guide&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Ember-Data via &lt;code&gt;window.DS&lt;/code&gt; is no longer supported, use &lt;code&gt;import DS from
&amp;#39;ember-data&amp;#39;&lt;/code&gt; and the modules API for Ember Data. For more details see the deprecation guide &lt;a href="/deprecations/ember-data/v2.x/#toc_global-version-of-ds"&gt;Global version of &lt;code&gt;DS&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The opt-in flag for a &lt;code&gt;Date.parse&lt;/code&gt; polyfill is a noop in Ember Data 3.0, and
the &lt;code&gt;Ember.Date.parse&lt;/code&gt; API is removed. For more details see the deprecation guides &lt;a href="/deprecations/ember-data/v2.x/#toc_ember-date-parse"&gt;&lt;code&gt;Ember.Date.parse&lt;/code&gt;&lt;/a&gt; and &lt;a href="/deprecations/ember-data/v2.x/#toc_date-prototype-extension"&gt;Date prototype extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Several APIs have effectively been relocated since Ember 2.0, and their old
implementationed have been removed. See the deprecation guides for &lt;a href="/deprecations/ember-data/v2.x/#toc_recordisloaded"&gt;&lt;code&gt;store.hasRecordForId&lt;/code&gt;&lt;/a&gt;, &lt;a href="/deprecations/ember-data/v2.x/#toc_lookupadapter"&gt;&lt;code&gt;store.adapterFor&lt;/code&gt;&lt;/a&gt;, &lt;a href="/deprecations/ember-data/v2.x/#toc_lookupserializer"&gt;&lt;code&gt;store.serializerFor&lt;/code&gt;&lt;/a&gt; and &lt;a href="/deprecations/ember-data/v2.x/#toc_store-serialize"&gt;&lt;code&gt;model.serialize&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Several initializers which Ember Data no longer uses have been removed. See
the deprecation guide for &lt;a href="/deprecations/ember-data/v2.x/#toc_unused-initializers"&gt;Unused Initializers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember Data 3.0, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v3.0.0"&gt;Ember Data 3.0.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_changes-in-ember-cli-3-0'&gt;Changes in Ember CLI 3.0&lt;/h2&gt;
&lt;hr&gt;

&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;

&lt;p&gt;Ember CLI 3.0 makes it easier to use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; by including the addon
&lt;a href="https://github.com/machty/ember-maybe-import-regenerator"&gt;ember-maybe-import-regenerator&lt;/a&gt;
in the default app blueprint.&lt;/p&gt;

&lt;p&gt;Below we&amp;#39;ve listed some of the most significant API removals in Ember CLI 3.0.
For a more in-depth summary see &lt;a href="/blog/2017/10/03/the-road-to-ember-3-0.html#toc_apis-removed-in-ember-cli-3-0"&gt;The Road to Ember 3.0: APIs Removed in Ember
CLI
3.0&lt;/a&gt;,
and for an exhaustive list of removals, see the &lt;a href="/deprecations/ember-cli/v2.x/"&gt;Ember CLI 2.x deprecation
guide&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for base URL configuration is removed. For more
details on how to migrate away from &lt;code&gt;baseURL&lt;/code&gt;, see the deprecation guide &lt;a href="/deprecations/ember-cli/v2.x/#toc_base-url"&gt;Base
URL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;Brocfile.js&lt;/code&gt; is be removed. For more details see the deprecation
guide &lt;a href="/deprecations/ember-cli/v2.x/#toc_migrate-from-brocfile-js-to-ember-cli-build-js"&gt;Migrate from &lt;code&gt;Brocfile.js&lt;/code&gt; to &lt;code&gt;ember-cli-build.js&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the changes in Ember CLI 3.0 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v3.0.0"&gt;Ember CLI 3.0.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_migrating-to-ember-3-0'&gt;Migrating to Ember 3.0&lt;/h2&gt;
&lt;hr&gt;

&lt;p&gt;To ensure as many applications as possible make the transition from 2.x to
3.x, all public APIs removed in Ember.js 3.0 have been extracted into the
&lt;a href="https://github.com/emberjs/ember-2-legacy"&gt;ember-2-legacy&lt;/a&gt; addon. This addon
will be supported through Ember.js 3.4, the first LTS of the 3.x series.&lt;/p&gt;

&lt;p&gt;The addon maintains support for all APIs in the &lt;a href="https://www.emberjs.com/deprecations/v2.x/"&gt;Ember.js 2.x deprecations
guide&lt;/a&gt;. Please note that these are
only APIs from Ember.js itself, and there is no extended support addon for
features removed from Ember Data or Ember CLI.&lt;/p&gt;

&lt;p&gt;Applications that need to upgrade through several versions may want to consider
the
&lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt;
addon to isolate individual deprecations.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h3&gt;
&lt;p&gt;This summer the Ember project will mark five years since Ember 1.0 was
released. Every six weeks since 1.0 (well, &lt;em&gt;nearly&lt;/em&gt; every six weeks) we&amp;#39;ve
had a new set of incremental improvements to announce. That is some impressive
stuff! Thank you for your
continued contribution to this project, and for your participation in creating
a great set of tools for building on the web.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.18 and 3.0 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2018/01/01/ember-2-18-released.html"/>
    <id>http://emberjs.com/blog/2018/01/01/ember-2-18-released.html</id>
    <published>2018-01-01T00:00:00+00:00</published>
    <updated>2018-01-01T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.18.0 of Ember.js, Ember Data,
and Ember CLI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After 2.5 years and 18 minor releases, Ember 2.18 marks the end of the project's 2.x series&lt;/strong&gt;.
To ensure a smooth upgrade path going into the 3.x series, 2.18...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.18.0 of Ember.js, Ember Data,
and Ember CLI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After 2.5 years and 18 minor releases, Ember 2.18 marks the end of the project&amp;#39;s 2.x series&lt;/strong&gt;.
To ensure a smooth upgrade path going into the 3.x series, 2.18 has been
declared an LTS candidate. In six weeks the latest 2.18 build will succeed
Ember 2.16.2 as the latest LTS release. As an LTS, it will
receive bug fixes until Ember 3.5 is released.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we also kick off the 3.0 beta cycle for all sub-projects.&lt;/strong&gt; Ember 3.0
introduces no new features. Instead, it removes support for deprecated public APIs,
all of which have been deprecated since at least Ember 2.14 (released July 2017).
Extended support for removed Ember.js APIs will be provided via an
optional addon through Ember 3.4.&lt;/p&gt;

&lt;p&gt;Ember 3.0 removes support for Microsoft Internet Explorer 9,
IE 10, and PhantomJS. This includes support for these platforms by Ember.js,
Ember Data, and Ember CLI. For more details about this decision see
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0252-browser-support-changes.md"&gt;RFC 252&lt;/a&gt;
and the discussion on &lt;a href="https://github.com/emberjs/rfcs/pull/252"&gt;RFC PR #252&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need the help of the Ember community (especially addon authors) to test
the 3.0 beta builds and transition path for 2.x codebases. If you encounter any
unexpected changes while testing Ember 3.0 beta, especially in features not
previously marked as deprecated by 2.14, please open an issue on the appropriate repo.&lt;/p&gt;

&lt;p&gt;You can read more about our detailed transition plans through Ember 3.5
in
&lt;a href="https://www.emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html"&gt;The Road to Ember 3.0&lt;/a&gt;
and below.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core of the Ember framework. It provides routing,
rendering, and dependency injection features.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-18'&gt;Changes in Ember.js 2.18&lt;/h3&gt;
&lt;p&gt;Ember.js 2.18 is an incremental and backwards compatible release which
includes minor bug fixes. No new features or public API deprecations are
introduced.&lt;/p&gt;

&lt;p&gt;2.18 is light on changes because we want the final release of the 2.x cycle to
be as stable and battle-tested as possible. 2.18 is an LTS candidate, which means
that after six weeks it will be promoted to an LTS release. As an LTS release it
will receive bug fixes until Ember 3.5 is released and security patches until
Ember 3.9 is released.&lt;/p&gt;

&lt;p&gt;2.18 is the final release of Ember.js to support IE9, IE10, and PhantomJS. It is
also the final release published for Bower.&lt;/p&gt;

&lt;p&gt;&amp;quot;Intimate API&amp;quot; refers to API surface that maintainers never intended to become
public, but which still has some small use in the wild. 2.18.0 adds an intimate
API deprecation for passing &lt;code&gt;targetObject&lt;/code&gt; to a component invocation. Support
for this API will be removed in Ember 3.5. See
&lt;a href="https://github.com/emberjs/ember.js/pull/14590"&gt;PR #14590&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 2.18, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.18.0"&gt;Ember.js 2.18.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-3-0'&gt;Upcoming Changes in Ember.js 3.0&lt;/h3&gt;
&lt;p&gt;Ember.js 3.0 is the first release in the 3.x series. It introduces no new
public API or deprecations. Instead, it is comprised of bug fixes and the removal of
previously deprecated public API from the 2.x cycle. This release drops support
for IE9, IE10, and PhantomJS.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_removed-apis-in-ember-js-3-0'&gt;Removed APIs in Ember.js 3.0&lt;/h4&gt;
&lt;p&gt;The public APIs removed in 3.0-beta.1 do not yet represent the complete list
of removals planned for 3.0 stable.
For an exhaustive list of planned 3.0 removals and migration guidance see the
&lt;a href="https://www.emberjs.com/deprecations/v2.x/"&gt;Ember.js 2.x deprecation guide&lt;/a&gt;
(any entry &amp;quot;until: 3.0&amp;quot;) and the quest issue
&lt;a href="https://github.com/emberjs/ember.js/issues/15876"&gt;emberjs/ember.js#15876&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list of public API removals included in 3.0-beta.1 are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;{{render}}&lt;/code&gt; helper has been removed. Any remaining usage should be
&lt;a href="https://emberjs.com/deprecations/v2.x/#toc_code-render-code-helper"&gt;migrated to components&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;didInitAttrs&lt;/code&gt; is removed and can be &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_ember-component-didinitattrs"&gt;replaced with &lt;code&gt;init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Declaring an observer with dependent keys after the callback is removed. Dependent keys should be passed before the callback as described in the &lt;a href="https://emberjs.com/api/ember/2.17/classes/@ember%2Fobject/methods/observer?anchor=observer"&gt;API docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumerable#contains&lt;/code&gt; and &lt;code&gt;Array#contains&lt;/code&gt; methods are removed. Instead usage should be &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_enumerable-contains"&gt;replaced with &lt;code&gt;includes&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{link-to}}&lt;/code&gt; unwrapped the &lt;code&gt;model&lt;/code&gt; property from passed controllers. This
behavior has been removed.&lt;/li&gt;
&lt;li&gt;Specifying &lt;code&gt;defaultLayout&lt;/code&gt; on a component rather than &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_ember-component-defaultlayout"&gt;&lt;code&gt;layout&lt;/code&gt;&lt;/a&gt; has been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.Handlebars.SafeString&lt;/code&gt; has been removed. Instead, use &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_use-ember-string-htmlsafe-over-ember-handlebars-safestring"&gt;&lt;code&gt;Ember.String.htmlSafe&lt;/code&gt;&lt;/a&gt; or the &lt;code&gt;import { htmlSafe } from &amp;#39;@ember/string&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.K&lt;/code&gt; has been removed. Usage should be replaced with &lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_deprecations-added-in-2-12"&gt;inline functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for legacy initializers with two arguments (container, application)
has been removed in favor of
&lt;a href="https://emberjs.com/deprecations/v2.x/#toc_initializer-arity"&gt;a single argument of &lt;code&gt;application&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further planned public API removals for 3.0 include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember&amp;#39;s legacy binding system, including &lt;code&gt;Ember.Binding&lt;/code&gt; and the &lt;code&gt;fooBinding&lt;/code&gt;
micro-syntax. See the &lt;a href="https://emberjs.com/deprecations/v2.x/#toc_ember-binding"&gt;migration guide&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;Ember&amp;#39;s &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;MapWithDefault&lt;/code&gt;, and &lt;code&gt;OrderedSet&lt;/code&gt; classes. These should be
replaced with native features or with implementations from other libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see &lt;a href="https://github.com/emberjs/ember.js/issues/15876"&gt;emberjs/ember.js#15876&lt;/a&gt;
for more details (including about previously deprecated private or intimate
API removals) and updates during the beta cycle.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_transitioning-to-3-x-with-ember-2-legacy'&gt;Transitioning to 3.x with ember-2-legacy&lt;/h4&gt;
&lt;p&gt;Public APIs removed in Ember.js 3.0 have each been ported to the
&lt;a href="https://github.com/emberjs/ember-2-legacy"&gt;ember-2-legacy&lt;/a&gt; addon. This addon
makes it possible for applications to adopt 3.0 even if they still
require features unsupported by the core of the framework.&lt;/p&gt;

&lt;p&gt;This addon will not include support for removed intimate or private APIs, nor
will it enable support for IE9, IE10, PhantomJS, or Bower. In &lt;a href="https://www.emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html#toc_transitioning-to-3-0"&gt;The Road to Ember
3.0&lt;/a&gt;
we committed to support this addon through Ember.js 3.4, the first LTS
candidate of the 3.x cycle.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-ember-js-3-0-changes'&gt;Other Ember.js 3.0 Changes&lt;/h4&gt;
&lt;p&gt;Ember.js 3.0 removes support for IE9,
IE 10, and PhantomJS. For more details about this decision see
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0252-browser-support-changes.md"&gt;RFC 252&lt;/a&gt;
and the discussion on &lt;a href="https://github.com/emberjs/rfcs/pull/252"&gt;RFC PR #252&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, Ember.js 3.0 will not be published for Bower.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 3.0, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v3.0.0-beta.1"&gt;Ember.js 3.0.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-18'&gt;Changes in Ember Data 2.18&lt;/h3&gt;
&lt;p&gt;Ember Data 2.18 contains no new features. The changes introduced in
Ember Data 2.18 mostly focus on bug fixes and improved documentation.&lt;/p&gt;

&lt;p&gt;One public API deprecation targeting &lt;strong&gt;Ember Data 4.0&lt;/strong&gt; is introduced in Ember Data 2.18:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for &amp;quot;production-like&amp;quot; values of &lt;code&gt;EMBER_ENV&lt;/code&gt; &lt;a href="https://github.com/emberjs/data/pull/5239"&gt;will be removed&lt;/a&gt;.
For example, custom production names like &lt;code&gt;production-qa&lt;/code&gt; should be replaced with &lt;code&gt;production&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes in Ember Data 2.18, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.18.0"&gt;Ember Data 2.18.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-data-3-0'&gt;Upcoming changes in Ember Data 3.0&lt;/h3&gt;
&lt;p&gt;Ember Data 3.0 contains major improvements in the testing blueprints
that are shipped with Ember Data and used by Ember CLI when you use
&lt;code&gt;ember generate&lt;/code&gt; &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;adapter&lt;/code&gt;, or &lt;code&gt;serializer&lt;/code&gt;.  Big thanks to
&lt;a href="https://github.com/alexander-alvarez"&gt;@alexander-alvarez&lt;/a&gt; for all his
work on the &lt;a href="https://github.com/emberjs/data/issues/5292"&gt;QUnit Blueprints Quest
Issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are no deprecations introduced in Ember Data 3.0.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 3.0, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v3.0.0-beta.1"&gt;Ember Data 3.0.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-18'&gt;Changes in Ember CLI 2.18&lt;/h3&gt;
&lt;p&gt;Ember CLI 2.18 is an incremental release featuring bug fixes and improvements.
This release does not introduce any new deprecations.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_eslint-configuration-changes'&gt;ESLint configuration changes&lt;/h4&gt;
&lt;p&gt;Newly generate Ember applications will now have only a single &lt;code&gt;.eslintrc.js&lt;/code&gt;
file. This file uses the &amp;quot;overrides&amp;quot; feature of ESLint to customize rules
appropriately for test or Node files.&lt;/p&gt;

&lt;p&gt;For more details see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ember-cli/ember-cli/pull/7443"&gt;ember-cli/ember-cli#7443&lt;/a&gt; Use overrides for a single &lt;code&gt;.eslintrc.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ember-cli/ember-cli/pull/7455"&gt;ember-cli/ember-cli#7455&lt;/a&gt; Add eslint-plugin-ember to default linting config.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_node-7-removed-from-ci-testing-matrix'&gt;Node 7 removed from CI testing matrix&lt;/h4&gt;
&lt;p&gt;According to the &lt;a href="https://github.com/ember-cli/ember-cli/blob/master/docs/node-support.md"&gt;Node support policy&lt;/a&gt; of the Ember CLI project,
Node 7 is removed from the testing matrix.
If you are developing an application using Ember CLI, it is recommended that you upgrade your Node to one of the &lt;a href="https://github.com/nodejs/Release"&gt;active LTS&lt;/a&gt; versions to guarantee security updates.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_addon-dependencies-when-using-npm-link'&gt;Addon dependencies when using npm link&lt;/h4&gt;
&lt;p&gt;Previously, if you were npm-linking an addon that had itself npm-linked a dependency, Ember CLI would fail to find it. This is now fixed.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-crossdomain-xml-code-removed-for-new-applications'&gt;&lt;code&gt;crossdomain.xml&lt;/code&gt; removed for new applications&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;crossdomain.xml&lt;/code&gt; was originally introduced to limit vulnerabilities when
using the Flash Player.
It did this by declaring which hosts the Flash Player could connect to outside
the one hosting the file.
Browsers have since disabled Flash for security reasons, rendering the file moot.
Ember CLI 2.18 will no longer generate the file for new applications.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.18 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.18.0"&gt;Ember CLI 2.18.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-3-0'&gt;Upcoming Changes in Ember CLI 3.0&lt;/h3&gt;
&lt;p&gt;Ember CLI 3.0 will feature a much improved README for the addon blueprint.
The improvements include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An automatically generated &amp;quot;Installation&amp;quot; section&lt;/li&gt;
&lt;li&gt;An empty &amp;quot;Usage&amp;quot; section&lt;/li&gt;
&lt;li&gt;A &amp;quot;License&amp;quot; section&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spec.commonmark.org/0.28/#setext-heading"&gt;Setext headings&lt;/a&gt; to emphasize sections when in raw text mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ember CLI 3.0 does not introduce any new deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 3.0.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v3.0.0-beta.1"&gt;Ember CLI 3.0.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. We are extremely grateful to our
contributors for their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.16-LTS, Ember 2.17 and 2.18 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/11/20/ember-2-17-released.html"/>
    <id>http://emberjs.com/blog/2017/11/20/ember-2-17-released.html</id>
    <published>2017-11-20T00:00:00+00:00</published>
    <updated>2017-11-20T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;Updated on December 19, 2017 to include information about Ember.js 2.16-LTS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today the Ember project is releasing Ember.js 2.16 LTS (a long-term support
release) and version 2.17.0 of Ember.js, Ember Data, and
Ember CLI.&lt;/p&gt;

&lt;p&gt;This release also kicks off...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;Updated on December 19, 2017 to include information about Ember.js 2.16-LTS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today the Ember project is releasing Ember.js 2.16 LTS (a long-term support
release) and version 2.17.0 of Ember.js, Ember Data, and
Ember CLI.&lt;/p&gt;

&lt;p&gt;This release also kicks off the 2.18 beta cycle for all sub-projects. We encourage
our community (especially addon authors) to help test these beta builds and
report any bugs before they are published as a final release in six weeks&amp;#39; time.
The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to
continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;Despite an initial delay on these releases, and an additional delay on this announcement,
the &lt;a href="https://emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html#toc_the-ember-3-0-release-schedule"&gt;Ember 3.0 Release Schedule&lt;/a&gt; is unchanged.
This means that Ember 2.18 and the first beta of Ember 3.0 will be release on January 1st, 2018.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/builds/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2015/06/16/ember-project-at-2-0.html"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-js-2-16-lts'&gt;Ember.js 2.16-LTS&lt;/h3&gt;
&lt;p&gt;Ember 2.16-LTS is the latest long-term support release. You can install it
by upgrading &lt;code&gt;ember-source&lt;/code&gt; to &lt;code&gt;~2.16.2&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The LTS channel is designed for Ember users who would like to upgrade less
frequently, while still getting support from the project and the wider
ecosystem. At the same time, it allows addon authors to know which versions
of Ember to focus their effort on.&lt;/p&gt;

&lt;p&gt;Per our &lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;usual policy&lt;/a&gt;,
Ember 2.16-LTS is released six weeks after the
&lt;a href="https://www.emberjs.com/blog/2017/10/11/ember-2-16-released.html"&gt;2.16.0 stable release&lt;/a&gt;.
This allows ample time to fix any reported regressions and ensures a rock
solid LTS release. It will continue to receive critical bugfixes for six
release cycles (roughly August 2018), and security patches for ten release
cycles (roughly Janurary 2019).&lt;/p&gt;

&lt;p&gt;Meanwhile, Ember 2.12-LTS will continue to receive critical bugfixes for another
two release cycles (roughly Feburary 2018), and security patches for six release
cycles (roughly August 2018). Users of Ember 2.12-LTS should make use of this
overlapping period to transition over to Ember 2.16-LTS.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;For more details on the changes landing in Ember.js 2.16-LTS, please review the
&lt;a href="https://github.com/emberjs/ember.js/blob/v2.16.2/CHANGELOG.md"&gt;Ember.js 2.16.2 CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-17'&gt;Changes in Ember.js 2.17&lt;/h3&gt;
&lt;p&gt;Ember.js 2.17 is an incremental, backwards compatible release of Ember with
bugfixes and performance improvements.&lt;/p&gt;

&lt;p&gt;Some of the more notorious fixes were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;filter&lt;/code&gt;/&lt;code&gt;map&lt;/code&gt;/&lt;code&gt;sort&lt;/code&gt; computed properties now &lt;a href="https://github.com/emberjs/ember.js/pull/15855"&gt;properly expand dependent keys using braces, like &lt;code&gt;items.@each.{prop1,prop2}&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unhandles rejections are &lt;a href="https://github.com/emberjs/ember.js/pull/15871"&gt;no longer thrown twice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;link-to&lt;/code&gt;&amp;#39;s &lt;code&gt;activeClass&lt;/code&gt; no longer &lt;a href="https://github.com/emberjs/ember.js/pull/15265"&gt;erroneously appends transitioning classes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Not passing all query params to &lt;code&gt;RouterService&lt;/code&gt;&amp;#39;s &lt;code&gt;transitionTo&lt;/code&gt; no longer &lt;a href="https://github.com/emberjs/ember.js/pull/15613"&gt;throws an error&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-2-17'&gt;Deprecations in Ember 2.17&lt;/h4&gt;
&lt;p&gt;There were no new deprecations introduced in 2.17.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 2.17, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.17.0"&gt;Ember.js 2.17.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-18'&gt;Upcoming Changes in Ember.js 2.18&lt;/h3&gt;
&lt;p&gt;Ember.js 2.18 will see the &lt;a href="https://github.com/emberjs/ember.js/pull/15754"&gt;removal of the &lt;code&gt;router.router&lt;/code&gt; deprecations&lt;/a&gt; and respective code.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-js-2-18'&gt;Deprecations in Ember.js 2.18&lt;/h4&gt;
&lt;p&gt;One new deprecation was introduced in Ember.js 2.18:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_code-targetobject-code"&gt;&lt;code&gt;targetObject&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 2.18, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.18.0-beta.1"&gt;Ember.js 2.18.0-beta.1&lt;/a&gt; and &lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.18.0-beta.2"&gt;Ember.js 2.18.0-beta.2&lt;/a&gt; release pages.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-17'&gt;Changes in Ember Data 2.17&lt;/h3&gt;
&lt;p&gt;Ember.js 2.17 will contain no new features. The changes introduced in
Ember Data 2.17 mostly focus on bug fixes, improved documentation and
build improvments to support changes in the ember-cli ecosystem and
fix a regression in support for build using Node 4.x.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-17'&gt;Deprecations in Ember Data 2.17&lt;/h4&gt;
&lt;p&gt;No new deprecations are introduced in Ember Data 2.17.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember Data 2.17, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.17.0"&gt;Ember Data 2.17.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-data-2-18'&gt;Upcoming changes in Ember Data 2.18&lt;/h3&gt;
&lt;p&gt;No major new features are planned for Ember Data 2.18. The Ember Data
2.18 is expected to focus on bug fixes around relationships. Some of
the bigger bug fixes are expected to be backported to older releases
durring the 2.18 beta cycle.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-18'&gt;Deprecations in Ember Data 2.18&lt;/h4&gt;
&lt;p&gt;No new deprecations are planned in Ember Data 2.18.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 2.18, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.18.0-beta.1"&gt;Ember Data 2.18.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data! To upgrade
your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project
directory to apply the blueprint changes. You can preview those changes for
&lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.15.0...v2.17.0"&gt;applications&lt;/a&gt;
and
&lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.15.0...v2.17.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-17'&gt;Changes in Ember CLI 2.17&lt;/h3&gt;
&lt;p&gt;Ember CLI previously displayed a warning when you removed &lt;code&gt;ember-cli-shims&lt;/code&gt;, but
the dependency is no longer needed if none of your dependencies are using the
old shims and all of them are using &lt;code&gt;ember-cli-babel&lt;/code&gt; 6.6.0 or above. Due to
that, the warning has been removed in the new release.&lt;/p&gt;

&lt;p&gt;With the release of Ember 2.17, Ember 2.16 becomes an LTS release. To ensure
that the default &lt;code&gt;ember-try&lt;/code&gt; configurations are up to date for new applications,
Ember 2.8 LTS was retired from the configuration and Ember 2.16 was added.&lt;/p&gt;

&lt;p&gt;Ember CLI has been using headless Chrome for &lt;code&gt;ember test&lt;/code&gt; for a while. In Ember
CLI 2.17 you now have the option to run your tests in a browser window using
&lt;code&gt;ember test --server&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_node-js-9-support'&gt;Node.js 9 Support&lt;/h4&gt;
&lt;p&gt;Per the Ember CLI Node.js version support policy, Ember CLI officially supports
Node 9 as the active Node.js version and will continue to do so throught its
&lt;a href="https://github.com/ember-cli/ember-cli/blob/026cefd5de36c0ae448883067450f51f2e127bbf/docs/node-support.md"&gt;Active window&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As part of this support, Ember CLI will no longer report warnings when run under
Node 9.&lt;/p&gt;

&lt;p&gt;Node 7 will report warnings as its support period has terminated.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The build pipeline went through an internal refactoring to make it more
flexible and composable.&lt;/li&gt;
&lt;li&gt;Fixed bug where the &lt;code&gt;app/&lt;/code&gt; tree was being linted even if it was not present.&lt;/li&gt;
&lt;li&gt;Ensured &lt;code&gt;test-support&lt;/code&gt; and &lt;code&gt;addon-test-support&lt;/code&gt; trees are linted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-cli-2-17'&gt;Deprecations in Ember CLI 2.17&lt;/h4&gt;
&lt;p&gt;No new deprecations were added in Ember CLI 2.17.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-18'&gt;Upcoming Changes in Ember CLI 2.18&lt;/h3&gt;
&lt;p&gt;The next version of Ember CLI will see some user experience improvements.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;crossdomain.xml&lt;/code&gt; will no longer be generated for new applications. The file was
an artifact from a time when Flash was a popular vector for security exploits.
Now that that is no longer a concern, the file is not necessary.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;livereload&lt;/code&gt; URL was removed from the output of &lt;code&gt;ember server&lt;/code&gt;. Users would
get confused because this URL is printed right away when running the development
server, but the actual URL the application is running under will only be shown
when the build is finished. Users would click the &lt;code&gt;livereload&lt;/code&gt; URL and be
greeted with a blank page and errors.&lt;/p&gt;

&lt;p&gt;If you used &lt;code&gt;npm link&lt;/code&gt; with a dependency that had itself &lt;code&gt;npm link&lt;/code&gt;
dependencies, they would be silently dropped in previous versions of Ember CLI.
This is now addressed.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-cli-2-18'&gt;Deprecations in Ember CLI 2.18&lt;/h4&gt;
&lt;p&gt;There are no deprecations planned for Ember CLI 2.18.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.18.0-beta.1 and detailed upgrade
instructions, please review the
&lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.18.0-beta.1"&gt;Ember CLI 2.18.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of these
releases serve as a reminder that the Ember project would not have been possible
without your continued support. We are extremely grateful to our contributors
for their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 2.16 and 2.17 Beta Released</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/10/11/ember-2-16-released.html"/>
    <id>http://emberjs.com/blog/2017/10/11/ember-2-16-released.html</id>
    <published>2017-10-11T00:00:00+00:00</published>
    <updated>2017-10-11T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember project is releasing version 2.16.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;After six weeks as a stable release, Ember.js 2.16 will be promoted to
&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;long term support&lt;/a&gt;,
under which it will receive bugfixes for the next 6 releases and...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember project is releasing version 2.16.0 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;After six weeks as a stable release, Ember.js 2.16 will be promoted to
&lt;a href="http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html"&gt;long term support&lt;/a&gt;,
under which it will receive bugfixes for the next 6 releases and security fixes
for the next 10 release.&lt;/p&gt;

&lt;p&gt;This release also kicks off the 2.17 beta cycle for all sub-projects. We encourage our
community (especially addon authors) to help test these beta builds and report
any bugs before they are published as a stable release in six weeks&amp;#39; time.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-js'&gt;Ember.js&lt;/h2&gt;
&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-js-2-16'&gt;Changes in Ember.js 2.16&lt;/h3&gt;
&lt;p&gt;Ember.js 2.16 continues to improve the framework with minor bug fixes.
Additionally, it introduces a major change in conventional usage. As of Ember
2.16, newly generated Ember applications will use the JavaScript modules API
described in detail below.&lt;/p&gt;

&lt;p&gt;No APIs are deprecated as part of these changes. Although we encourage
applications to upgrade to the new modules API, we plan to wait until
the module API is proven and more addons across the community are upgraded
before introducing a deprecation for the &lt;code&gt;Ember&lt;/code&gt; namespace object.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-js-modules-api'&gt;Ember.js Modules API&lt;/h4&gt;
&lt;p&gt;In Ember.js 2.16 the recommended way to access framework code in Ember
applications is via the JavaScript modules API described in
&lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md"&gt;RFC #176&lt;/a&gt;. For example this basic component definition in 2.15:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;session&lt;/span&gt;: Ember.inject.service(),
  &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Curious Case&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would in 2.16 conventions be written as:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@ember/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; { inject as service } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@ember/service&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Component.extend({
  &lt;span class="key"&gt;session&lt;/span&gt;: service(),
  &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;The Curious Case&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;JavaScript modules make the framework easier to document, make the distinction
between public and private API much easier to maintain, and provide
opportunities for performance work such as tree-shaking.&lt;/p&gt;

&lt;p&gt;Adopting a new
convention for importing the framework is a big task that impacts application
code, documentation, generators/blueprints, and more. We&amp;#39;ve made the following
changes to prepare for the shift in usage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://emberjs.com/api/"&gt;Ember.js
API documentation&lt;/a&gt; and
&lt;a href="https://guides.emberjs.com/v2.16.0/"&gt;Ember guides&lt;/a&gt; have been updated to reflect the new API.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/ember-cli/ember-cli/tree/master/blueprints/app"&gt;application
blueprints&lt;/a&gt;
for newly generated applications have been updated. You can review
the output of the new application generators in the
&lt;a href="https://github.com/ember-cli/ember-new-output"&gt;ember-new-output&lt;/a&gt; repo.&lt;/li&gt;
&lt;li&gt;A migration strategy for existing applications has been authored.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In rolling out the changes to Ember&amp;#39;s API documentation we uncovered a few bugs
in the website itself. We&amp;#39;re tracking fixes in &lt;a href="https://github.com/emberjs/website/issues/3024"&gt;emberjs/website#3024: Directly loaded URLs for
/api/ fail to load&lt;/a&gt; and
&lt;a href="https://github.com/ember-learn/ember-api-docs/issues/355"&gt;ember-learn/ember-api-docs#355: Get the Guides links to work with post 2.16 package restructure&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_updating-your-application'&gt;Updating your application&lt;/h4&gt;
&lt;p&gt;Existing applications can move to adopt the new import style immediately.
To update an application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade Ember CLI to 2.16.1, specifically the ember-cli-babel dependency
must be upgraded to v6.8.0 or greater.&lt;/li&gt;
&lt;li&gt;Install and run the
&lt;a href="https://github.com/ember-cli/ember-modules-codemod"&gt;ember-modules-codemod&lt;/a&gt;.
This command will migrate legacy code that imports the &lt;code&gt;&amp;#39;ember&amp;#39;&lt;/code&gt; package to
the new modules, updating files in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install ember-modules-codemod -g
cd my-ember-app
ember-modules-codemod
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;re using the new import API!&lt;/p&gt;

&lt;p&gt;Many applications use the
&lt;a href="https://github.com/ember-cli/ember-cli-shims"&gt;ember-cli-shims&lt;/a&gt;
package. This provides
an earlier design of Ember&amp;#39;s module API. This package continues
to work and will be provided by default in new Ember applications, however it will
be removed in a future version of Ember CLI. Migrating to the new modules
API is a good time to remove any usage of these legacy modules.&lt;/p&gt;

&lt;p&gt;The
&lt;a href="https://github.com/ember-cli/eslint-plugin-ember"&gt;eslint-plugin-ember&lt;/a&gt;
package provides a linting rule that can remove usage of the legacy modules
provided by ember-cli-shims.
To run this follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install eslint-plugin-ember v4.3.0 or greater as a dev dependency for your
application.&lt;/li&gt;
&lt;li&gt;Follow the eslint-plugin-ember
&lt;a href="https://github.com/ember-cli/eslint-plugin-ember#-usage"&gt;usage instructions&lt;/a&gt;
and update your &lt;code&gt;.eslintrc.js&lt;/code&gt; appropriately.
For more detailed instructions, see this excellent blog post:
&lt;a href="https://medium.com/@Dhaulagiri/embers-javascript-modules-api-b4483782f329"&gt;How To Use Ember’s New Module Import Syntax Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./node_modules/.bin/eslint --fix&lt;/code&gt; to convert ember-cli-shims module usage to plain &lt;code&gt;&amp;#39;ember&amp;#39;&lt;/code&gt;
imports.&lt;/li&gt;
&lt;li&gt;Run the ember-modules-codemod as described above. If you already ran it before
running &lt;code&gt;eslint --fix&lt;/code&gt;, you will need to run it a second time. This will convert the
&lt;code&gt;&amp;#39;ember&amp;#39;&lt;/code&gt; imports to their modern module API equivalents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your application no longer contains any usage of the legacy modules.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_updating-your-addons'&gt;Updating your addons&lt;/h4&gt;
&lt;p&gt;To provide addon users the best experience, we suggest you take the following
steps as an addon maintainer (or contributor!):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade your ember-cli-babel dependency to v6.8.0 or greater. This will permit your addon
to use the new modules in its &lt;code&gt;addon/&lt;/code&gt; and &lt;code&gt;test/&lt;/code&gt; directories.&lt;/li&gt;
&lt;li&gt;Ensure the &lt;code&gt;app/&lt;/code&gt; and &lt;code&gt;test-support/&lt;/code&gt; directories (both part of the dependent
app&amp;#39;s build) contain only re-exports from the &lt;code&gt;addon/&lt;/code&gt; directory. The files
in &lt;code&gt;app/&lt;/code&gt; should avoid importing any Ember APIs in any manner. In this
way an addon will be decoupled from the consuming application&amp;#39;s build and runtime
Ember API support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking these steps will ensure your addon&amp;#39;s users have a smooth path from previous
versions of Ember to 2.16, and beyond.&lt;/p&gt;

&lt;p&gt;If you have questions please join us in &lt;a href="https://embercommunity.slack.com/messages/C045BNHAP/"&gt;&lt;code&gt;#-ember-cli&lt;/code&gt; on the Ember.js
Community Slack&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-js-2-16'&gt;Deprecations in Ember.js 2.16&lt;/h4&gt;
&lt;p&gt;One new deprecation is introduced in Ember.js 2.16:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For historical reasons, Ember controllers have a private property &lt;code&gt;content&lt;/code&gt;
that aliases the &lt;code&gt;model&lt;/code&gt; property. Relying on this legacy behavior is
deprecated and will be unsupported in Ember 2.17. See the
&lt;a href="https://www.emberjs.com/deprecations/v2.x/#toc_controller-content-alias"&gt;deprecation guide&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details on changes in Ember.js 2.16, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.16.0"&gt;Ember.js 2.16.0 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-js-2-17'&gt;Upcoming Changes in Ember.js 2.17&lt;/h3&gt;
&lt;p&gt;Ember.js 2.17 will contain no new features. Instead it will primarily
include bug fixes, performance, and stability work.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember.js 2.17, please review the
&lt;a href="https://github.com/emberjs/ember.js/releases/tag/v2.17.0-beta.1"&gt;Ember.js 2.17.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;

&lt;p&gt;Ember Data 2.16.2 is the latest stable release at this time.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-data-2-16'&gt;Changes in Ember Data 2.16&lt;/h3&gt;
&lt;p&gt;Ember Data 2.16 is a bugfix release. It contains no new features but
it does have several bug fixes for &lt;a href="https://github.com/emberjs/data/pull/5196"&gt;build warnings&lt;/a&gt;,
&lt;a href="https://github.com/emberjs/data/pull/5029"&gt;header parsing&lt;/a&gt; and
&lt;a href="https://github.com/emberjs/data/pull/5044"&gt;outdated dependencies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are no new deprecations introduced in Ember Data 2.16.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember Data 2.16, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.16.0"&gt;Ember Data 2.16.0 release page&lt;/a&gt;.
Again, 2.16.2 was published shortly after 2.16.0 with minor bug fixes.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-data-2-17'&gt;Upcoming changes in Ember Data 2.17&lt;/h3&gt;
&lt;p&gt;Due to a late start in the Ember Data 2.16 beta cycle the Ember Data
2.17.0-beta.1 release is currently the same code as 2.16.0. The beta
releases will continue to receive beta bug fixes and it is expected to
diverge from Ember Data 2.16.0 by the time 2.17.0 is released in 6
weeks.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_deprecations-in-ember-data-2-17'&gt;Deprecations in Ember Data 2.17&lt;/h4&gt;
&lt;p&gt;There are no planned deprecations introduced in Ember Data 2.17.&lt;/p&gt;

&lt;p&gt;For more details on the upcoming changes in Ember Data 2.17.0-beta.1, please review the
&lt;a href="https://github.com/emberjs/data/releases/tag/v2.17.0-beta.1"&gt;Ember Data 2.17.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-cli'&gt;Ember CLI&lt;/h2&gt;
&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js
applications.&lt;/p&gt;

&lt;p&gt;The latest version of Ember CLI is 2.16.1, as a small bug fix went out shortly
after release.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upgrading-ember-cli'&gt;Upgrading Ember CLI&lt;/h3&gt;
&lt;p&gt;You may upgrade Ember CLI separately from Ember.js and Ember Data! To upgrade
your projects using &lt;code&gt;yarn&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;yarn upgrade ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To upgrade your projects using &lt;code&gt;npm&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running the
upgrade command run &lt;code&gt;ember init&lt;/code&gt; inside of the project directory to apply the
blueprint changes. You can preview those changes for &lt;a href="https://github.com/ember-cli/ember-new-output/compare/v2.15.0...v2.16.0"&gt;applications&lt;/a&gt;
and &lt;a href="https://github.com/ember-cli/ember-addon-output/compare/v2.15.0...v2.16.0"&gt;addons&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_changes-in-ember-cli-2-16'&gt;Changes in Ember CLI 2.16&lt;/h3&gt;
&lt;p&gt;Ember CLI 2.16.0 upgrades the application build pipeline to use uglify-es.
uglify-es introduces support for minification of modern JavaScript features.
With this change, Ember CLI can now generate minified production builds of
non-transpiled JavaScript code.&lt;/p&gt;

&lt;p&gt;Ember CLI 2.16.0 adds support for addons to transform vendor resources via
&lt;code&gt;importTransforms&lt;/code&gt;, an implementation of &lt;a href="https://github.com/ember-cli/rfcs/blob/master/active/0000-add-custom-transform.md"&gt;Ember CLI RFC 108&lt;/a&gt;.
&amp;quot;Vendor resource&amp;quot; describes any file included via &lt;code&gt;app.import&lt;/code&gt;. This is an
advanced feature for addon authors, and is particularly useful for
&lt;a href="https://ember-fastboot.com/"&gt;FastBoot&lt;/a&gt;. In a future release FastBoot-aware
addons will be provided a declarative API for conditionally importing code in
Node.js or browser environments. See
&lt;a href="https://github.com/ember-fastboot/ember-cli-fastboot/pull/470"&gt;ember-fastboot/ember-cli-fastboot#470&lt;/a&gt; for more
details.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/kratiahuja"&gt;@kratiahuja&lt;/a&gt; for proposing
and implementing this feature.&lt;/p&gt;

&lt;p&gt;Other changes in 2.16.0 include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project configuration is now cached as a performance optimization. See
&lt;a href="https://github.com/ember-cli/ember-cli/pull/7333"&gt;ember-cli/ember-cli#7333&lt;/a&gt;,
&lt;a href="https://github.com/ember-cli/ember-cli/pull/7309"&gt;ember-cli/ember-cli#7309&lt;/a&gt;,
and
&lt;a href="https://github.com/ember-cli/ember-cli/pull/7270"&gt;ember-cli/ember-cli#7270&lt;/a&gt;
for more details.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember install&lt;/code&gt; now supports scoped npm packages, for example &lt;code&gt;ember install @cardstack/git&lt;/code&gt;.
See &lt;a href="https://github.com/ember-cli/ember-cli/pull/7109"&gt;ember-cli/ember-cli#7109&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Several internal refactoring efforts were undertaken that begin support for the
un-merged &lt;a href="https://github.com/ember-cli/rfcs/pull/110"&gt;Ember CLI strategies
RFC&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No new deprecations are added in Ember CLI 2.16.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.16 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.16.0"&gt;Ember CLI 2.16.0 release page&lt;/a&gt;.
Please note that 2.16.1 was published shortly after 2.16.0 and is the lastest
release.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_upcoming-changes-in-ember-cli-2-17'&gt;Upcoming Changes in Ember CLI 2.17&lt;/h3&gt;
&lt;p&gt;Ember CLI 2.17 introduces no major functionality changes or deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 2.17.0-beta.1 and detailed upgrade
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v2.17.0-beta.1"&gt;Ember CLI 2.17.0-beta.1 release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_thank-you'&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of
these releases serve as a reminder that the Ember project would not have been
possible without your continued support. Thanks to all our contributors for
their efforts.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Glimmer.js Progress Report</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/10/10/glimmer-progress-report.html"/>
    <id>http://emberjs.com/blog/2017/10/10/glimmer-progress-report.html</id>
    <published>2017-10-10T00:00:00+00:00</published>
    <updated>2017-10-10T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;At EmberConf in March of this year, &lt;a href="https://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html#toc_introducing-glimmer-js"&gt;we announced Glimmer.js&lt;/a&gt;, a
library for building modern UI components optimized for the mobile web. I wanted
to give an update on what we've been working on since then.&lt;/p&gt;

&lt;p&gt;There were two primary motivations for releasing...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;At EmberConf in March of this year, &lt;a href="https://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html#toc_introducing-glimmer-js"&gt;we announced Glimmer.js&lt;/a&gt;, a
library for building modern UI components optimized for the mobile web. I wanted
to give an update on what we&amp;#39;ve been working on since then.&lt;/p&gt;

&lt;p&gt;There were two primary motivations for releasing Glimmer.js as a standalone project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We wanted people who aren&amp;#39;t &amp;quot;all in&amp;quot; on Ember to have a way to incrementally
adopt part of the framework.&lt;/li&gt;
&lt;li&gt;We wanted a laboratory where we could freely run experiments on what a
next-generation component library might look like, without creating churn for
Ember users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because Ember&amp;#39;s rendering layer is built on top of the shared Glimmer VM,
successful experiments have a clear path to make their way upstream to Ember
users. And, once stabilized, we&amp;#39;d like Glimmer.js to be the default component
API for new Ember apps—but it&amp;#39;s still too premature to set any timelines for
that today.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_unlocking-experimentation'&gt;Unlocking Experimentation&lt;/h2&gt;
&lt;p&gt;While Ember is known for incorporating the best ideas from across the JavaScript
ecosystem, it&amp;#39;s important that we contribute back our own innovations, too.
Refining new ideas takes time and, often, a few false starts. How do we
reconcile the need to experiment with Ember&amp;#39;s vaunted stability guarantees?&lt;/p&gt;

&lt;p&gt;One of the themes we discussed in our keynote was a new focus on &lt;em&gt;unlocking
experimentation&lt;/em&gt;, that is, allowing people to easily try out and share unproven
ideas on top of the stable Ember core.&lt;/p&gt;

&lt;p&gt;Unlocking experimentation doesn&amp;#39;t just allow for &lt;em&gt;more&lt;/em&gt; ideas; it also leads to
&lt;em&gt;better&lt;/em&gt; ideas, because you can try things without worrying about breaking
changes. With Glimmer.js, we wanted to eat our own experimental dogfood.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve wanted to overhaul the component API in Ember for some time now. But
because components play such a central role, we knew that we &lt;em&gt;had&lt;/em&gt; to have a
tangible implementation for people to play with before we could credibly ask
them to comment on an RFC. And we knew that having an implementation would
almost certainly shake out problems with the design that we would need to
address.&lt;/p&gt;

&lt;p&gt;Glimmer.js is our way to iterate on a new component API until we have something
we feel confident submitting to the Ember RFC process.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve already received incredibly useful feedback from early adopters. In
addition, fellow core team member Chad Hietala and I have been on a team at
LinkedIn using Glimmer.js to build a production application.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://david.heinemeierhansson.com/posts/6-why-theres-no-rails-inc"&gt;To quote DHH&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The best frameworks are in my opinion extracted, not envisioned. And the best
way to extract is first to actually do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you notice that a lot of the items I describe below are performance-related,
that is at least partly due to our product&amp;#39;s all-consuming focus on mobile load
times. We are extremely excited about some of the recent breakthroughs we&amp;#39;ve
made and have enjoyed proving out some of our more esoteric ideas in a real app.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-s-new-in-glimmer'&gt;What&amp;#39;s New in Glimmer&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve been really, really busy and I&amp;#39;ve got a ton of updates to share with you. This blog post
got pretty long, so here&amp;#39;s the short version:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;#39;re adopting &lt;code&gt;&amp;lt;Capital /&amp;gt;&lt;/code&gt;-style component syntax.&lt;/li&gt;
&lt;li&gt;We&amp;#39;re adding support for customizing a component&amp;#39;s DOM attributes with &lt;code&gt;...attributes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You&amp;#39;ll be able to teleport your component&amp;#39;s elements anywhere in the DOM with the built-in &lt;code&gt;{{in-element}}&lt;/code&gt; helper.&lt;/li&gt;
&lt;li&gt;We&amp;#39;ve now got what we think might just be the fastest component library in the running, with:

&lt;ol&gt;
&lt;li&gt;Compiled binary bytecode&lt;/li&gt;
&lt;li&gt;Incremental rendering&lt;/li&gt;
&lt;li&gt;SSR with incremental rehydration
&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class='anchorable-toc' id='toc_adopting-code-capital-code-components'&gt;Adopting &lt;code&gt;&amp;lt;Capital /&amp;gt;&lt;/code&gt; Components&lt;/h3&gt;
&lt;p&gt;One of the most eagerly-awaited features of Glimmer.js is &amp;quot;angle bracket
components,&amp;quot; or components that you invoke &lt;code&gt;&amp;lt;like-this /&amp;gt;&lt;/code&gt; instead of
&lt;code&gt;{{like-this}}&lt;/code&gt;. I personally really like this syntax because it visually
disambiguates components from the dynamic data that flows through them.
It also unifies the attribute syntax between HTML and components:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! Ember }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;my-button&lt;/span&gt; &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="attribute-value"&gt;title&lt;/span&gt; &lt;span class="attribute-name"&gt;label&lt;/span&gt;=&lt;span class="error"&gt;(&lt;/span&gt;&lt;span class="attribute-value"&gt;t&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;Do&lt;/span&gt; &lt;span class="attribute-name"&gt;Something&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! HTML }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-value"&gt;label&lt;/span&gt;&lt;span class="error"&gt;=&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;t&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;Do&lt;/span&gt; &lt;span class="attribute-name"&gt;Something&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! Glimmer.js (today) }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;my-button&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-value"&gt;label&lt;/span&gt;&lt;span class="error"&gt;=&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;t&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;Do&lt;/span&gt; &lt;span class="attribute-name"&gt;Something&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This syntax is how Glimmer.js works today. However, the more we discussed the
design and started using it in real projects, the more we believed that this
exact API was flawed and needed to be rethought.&lt;/p&gt;

&lt;p&gt;First, a short history lesson. When we introduced components in Ember (back
before Ember 1.0!), we required them to include a dash (&lt;code&gt;-&lt;/code&gt;) in their name. This
rule came from the then-new &lt;a href="https://www.w3.org/TR/custom-elements/#custom-element-conformance"&gt;Custom Elements spec&lt;/a&gt;, a key part
of the Web Components API.&lt;/p&gt;

&lt;p&gt;Web Components have the problem of needing to disambiguate between built-in elements
and custom elements. What happens if I make a component called &lt;code&gt;&amp;lt;vr&amp;gt;&amp;lt;/vr&amp;gt;&lt;/code&gt; and later
the browser adds a built-in Virtual Reality element with the same name?&lt;/p&gt;

&lt;p&gt;The compromise was that custom elements must have a dash, keeping single-word
elements reserved for future versions of the HTML standard.&lt;/p&gt;

&lt;p&gt;Of course, Ember components don&amp;#39;t have the same problem, because they use
&lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; as delimeters instead of &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;. Nonetheless, we preemptively adopted
this constraint because we assumed Web Components were going to take the world
by storm and at some point we would need to migrate Ember components to Web
Components.&lt;/p&gt;

&lt;p&gt;As time has passed, though, it&amp;#39;s become increasingly clear that the use cases
served by Web Components, wonderful as they are, do not have the full set of
functionality to replace everything that an Ember component (or React component,
etc.) needs to do.&lt;/p&gt;

&lt;p&gt;Meanwhile, the more components I write, the more grating the naming restriction
feels. I hate the cognitive overhead of having to invent silly names like
&lt;code&gt;{{x-button}}&lt;/code&gt; when a single word would be much more descriptive.&lt;/p&gt;

&lt;p&gt;Unfortunately, this puts us in a bit of a pickle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We want to drop the annoying &lt;code&gt;dasherized-component&lt;/code&gt; requirement.&lt;/li&gt;
&lt;li&gt;We want to adopt &lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; brackets syntax for components, but now we have
the same naming collision hazard as Web Components.&lt;/li&gt;
&lt;li&gt;People want to use Web Components in their apps, so how do we know if
&lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt; means &amp;quot;create a custom element&amp;quot; or &amp;quot;create a Glimmer
component&amp;quot;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The core team has circled around different designs for &lt;em&gt;months&lt;/em&gt;, and this topic
has dominated both our weekly calls and our in-person meetings.&lt;/p&gt;

&lt;p&gt;At the most recent face-to-face meeting in Austin, we finally reached consensus
on a proposal that I&amp;#39;m really excited about.&lt;/p&gt;

&lt;p&gt;How do you disambiguate between Glimmer components and HTML elements? Our
proposal is to borrow the same rule that React uses: &lt;em&gt;components always start
with a capital letter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Our above example turns into this:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! new Glimmer.js }}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-value"&gt;label&lt;/span&gt;&lt;span class="error"&gt;=&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;t&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;Do&lt;/span&gt; &lt;span class="attribute-name"&gt;Something&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I love this for a few different reasons.&lt;/p&gt;

&lt;p&gt;First, to me, the capital letter makes components &lt;em&gt;really&lt;/em&gt; stand out in the
template, and we can improve syntax highlighting in editor plugins to make it
stand out even more. It also makes it clear when you&amp;#39;re invoking a Web Component
or not, whereas the original Glimmer.js syntax was ambiguous.&lt;/p&gt;

&lt;p&gt;Second, I hate the friction of having to invent a two-word name. The app I work
on has at least three different conventions people use to prefix or suffix
components. It feels bad and makes templates look more noisy than they should.
When we switched from dasherized to capitals, it felt viscerally like an
improvement.&lt;/p&gt;

&lt;p&gt;Third, for better or worse, many people consider React to be an &amp;quot;industry
standard&amp;quot; and aligning component naming makes Glimmer templates feel that much
more familiar. (Although do note that we are just adopting the naming
convention, not JSX itself!)&lt;/p&gt;

&lt;p&gt;This change also helps us solve the problem of &amp;quot;fragment&amp;quot; or &amp;quot;tagless&amp;quot;
components, i.e., templates that don&amp;#39;t have a single root element.&lt;/p&gt;

&lt;p&gt;While we&amp;#39;ve supported this in Ember for a long time, we were nervous about the
potential for confusion if you typed something like &lt;code&gt;&amp;lt;my-button /&amp;gt;&lt;/code&gt; in a
template, which looks like a Web Component, and it didn&amp;#39;t always correlate to a single
element in the DOM.&lt;/p&gt;

&lt;p&gt;Today in Glimmer.js, it is a compile-time error if your component template
doesn&amp;#39;t have a single root element. With &lt;code&gt;&amp;lt;Capital&amp;gt;&lt;/code&gt; components, we will remove
this restriction and allow you to have whatever you want in your template.&lt;/p&gt;

&lt;p&gt;One side-effect of this is that we will replace &lt;code&gt;this.element&lt;/code&gt; (which today is a
reference to the component&amp;#39;s root element) with &lt;code&gt;this.bounds.firstNode&lt;/code&gt; and
&lt;code&gt;this.bounds.lastNode&lt;/code&gt;, allowing you to traverse the range of DOM nodes
belonging to your component.&lt;/p&gt;

&lt;p&gt;There are still some open questions about what, if any, sugar to provide for the
single-element case.&lt;/p&gt;

&lt;p&gt;For example, we could make &lt;code&gt;this.element&lt;/code&gt; available in just those cases,
although we&amp;#39;re concerned that someone coming along and adding an extra element
to a template could subtly break any code relying on &lt;code&gt;this.element&lt;/code&gt;. Another
proposal was to set &lt;code&gt;this.element&lt;/code&gt; to the element with &lt;code&gt;...attributes&lt;/code&gt; on it
(see below). We&amp;#39;re looking forward to more design and discussion about how to
make this ergonomic without being error-prone.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_component-attributes'&gt;Component Attributes&lt;/h3&gt;
&lt;p&gt;Without getting into a full explanation of the difference between properties and
attributes in the DOM, suffice it to say that most web developers have a muddy mental
model at best. (And rightfully so—it took me forever to understand the difference.)&lt;/p&gt;

&lt;p&gt;While you can get pretty far pretending properties and attributes are
interchangeable, eventually you are going to run into cases where you really
have to set a property or you really have to set an attribute.&lt;/p&gt;

&lt;p&gt;Server-side rendering (SSR) complicates the issue because, of course, HTML can
&lt;em&gt;only&lt;/em&gt; serialize attributes, not properties.&lt;/p&gt;

&lt;p&gt;One drawback of both Ember and React&amp;#39;s components is that they don&amp;#39;t do a great
job of making it easy for consumers of components to set attributes.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take React as an example (although, again, it applies just as much to
Ember). I want to write a reusable &lt;code&gt;HiResImage&lt;/code&gt; component that anyone can
install from npm and use in their apps. It wraps an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element and renders
a low-resolution image by default, swapping in a high-resolution image when
clicked.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;HiResImage.jsx&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;import { Component } from 'react';

export default class HiResImage extends Component {
  render(props, state) {
    let showHiRes = () =&amp;gt; { this.setState({ hiRes: true }); }
    let { src, hiResSrc } = props;
    let { hiRes } = state;

    return &amp;lt;img src={hiRes ? hiResSrc : src} onClick={showHiRes}&amp;gt;;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can use the component like this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;HiResImage.jsx&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;HiResImage src=&amp;quot;corgi.jpg&amp;quot; hiResSrc=&amp;quot;corgi@2x.jpg&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But what happens if I want to set the width of the underlying &lt;code&gt;img&lt;/code&gt; element via
its &lt;code&gt;width&lt;/code&gt; attribute?&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;HiResImage.jsx&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;HiResImage width=&amp;quot;100%&amp;quot; src=&amp;quot;corgi.jpg&amp;quot; hiResSrc=&amp;quot;corgi@2x.jpg&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This won&amp;#39;t work because the only attributes or properties that get set are the
ones we&amp;#39;ve manually listed in our &lt;code&gt;render()&lt;/code&gt; method! The &lt;code&gt;width&lt;/code&gt; attribute here
will just get ignored.&lt;/p&gt;

&lt;p&gt;We have a few options, but none of them are that great.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We could enumerate all of the possible valid &lt;code&gt;img&lt;/code&gt; attributes that might get
passed in, but that is error-prone (new attributes get added all the time) and
takes a lot of code.&lt;/li&gt;
&lt;li&gt;We could use the spread operator (&lt;code&gt;...props&lt;/code&gt;), but that will set &lt;em&gt;everything&lt;/em&gt;
passed in as an attribute, even &amp;quot;known&amp;quot; props that aren&amp;#39;t attributes, like
&lt;code&gt;hiResSrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If we&amp;#39;re using Babel, we can use rest syntax in object destructuring to
separate &amp;quot;known&amp;quot; and &amp;quot;unknown&amp;quot; props: &lt;code&gt;let { src, hiResSrc, ...attrs } =
props&lt;/code&gt;. But this requires non-trivial runtime work, and means any props passed
in by accident will now be treated as an attribute.&lt;/li&gt;
&lt;li&gt;In Preact, the problem is even trickier because it will always set the &lt;code&gt;width&lt;/code&gt;
property no matter what, never the attribute. And setting the &lt;code&gt;width&lt;/code&gt;
&lt;em&gt;property&lt;/em&gt; to &lt;code&gt;&amp;quot;100%&amp;quot;&lt;/code&gt; results in an image zero pixels wide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Glimmer.js, you explicitly disambiguate between properties and attributes via
the presence of the &lt;code&gt;@&lt;/code&gt; sigil. In symmetry with HTML, attributes do not have &lt;code&gt;@&lt;/code&gt;,
while component arguments (&lt;code&gt;props&lt;/code&gt; in React parlance) do:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;template.hbs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;HiResImage&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;corgi.jpg&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;hiResSrc&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;corgi@2x.jpg&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;width&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;100%&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;hiResSrc&lt;/code&gt; are JavaScript values passed as arguments
to the component object, and &lt;code&gt;width&lt;/code&gt; is serialized to a string and set as an
attribute.&lt;/p&gt;

&lt;p&gt;&amp;quot;But wait,&amp;quot; you ask, &amp;quot;if components aren&amp;#39;t required to have a single root
element anymore, where do attributes go?&amp;quot;&lt;/p&gt;

&lt;p&gt;With recent changes in Glimmer VM, we can now support an &lt;code&gt;...attributes&lt;/code&gt; syntax
that we&amp;#39;ve colloquially started calling &amp;quot;splattributes&amp;quot; (because they &amp;quot;splat&amp;quot;
attributes from the outside onto an element).&lt;/p&gt;

&lt;p&gt;In our case, the Glimmer.js version of the &lt;code&gt;HiResImage&lt;/code&gt; component might look like this:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;component.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component, { tracked } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; HiResImage &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  &lt;span class="error"&gt;@&lt;/span&gt;tracked hiRes = &lt;span class="predefined-constant"&gt;false&lt;/span&gt;;

  showHiRes() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.hiRes = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;template.hbs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;hiRes&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;hiResSrc&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-value"&gt;...attributes&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;else&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;src&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;on&lt;/span&gt; &lt;span class="attribute-name"&gt;click&lt;/span&gt;=&lt;span class="error"&gt;(&lt;/span&gt;&lt;span class="attribute-value"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;showHiRes&lt;/span&gt;&lt;span class="error"&gt;)&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-value"&gt;...attributes&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here, any attributes passed in on the invoking side will be &amp;quot;splatted&amp;quot; onto the
appropriate element.&lt;/p&gt;

&lt;p&gt;So what happens if you try to pass attributes to a component that doesn&amp;#39;t have
&lt;code&gt;...attributes&lt;/code&gt;? At runtime, you&amp;#39;ll get a hard error telling you that the
component should add &lt;code&gt;...attributes&lt;/code&gt; to one or more elements. We can probably
produce compile-time errors in the majority of less dynamic cases, too.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_portals'&gt;Portals&lt;/h3&gt;
&lt;p&gt;Typically, the component hierarchy maps directly to the DOM hierarchy, meaning
all of a component&amp;#39;s elements are rendered inside a DOM element that belongs to
the parent component.&lt;/p&gt;

&lt;p&gt;Occasionally, though, it can be helpful to break out of the current DOM tree and
render a component&amp;#39;s content somewhere else. While there are many different use
cases, the most common one I&amp;#39;ve seen is for rendering modal dialogs.&lt;/p&gt;

&lt;p&gt;This is easy to do now with the built-in &lt;code&gt;{{in-element}}&lt;/code&gt; helper. This helper
will render the block you pass to it inside a foreign element. (In React-land,
this functionality is usually referred to as a portal, and as of React 16 is
included by default in &lt;code&gt;react-dom&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;For example, if I had a &lt;code&gt;Modal&lt;/code&gt; component and I wanted to always render its
content into a specially-styled element at the root of the body (with &lt;code&gt;position:
fixed&lt;/code&gt;, say), I might write it like this:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;component.js&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;@glimmer/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="reserved"&gt;class&lt;/span&gt; Modal &lt;span class="reserved"&gt;extends&lt;/span&gt; Component {
  modalElement = document.getElemenyById(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;modal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;template.hbs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;in-element&lt;/span&gt; &lt;span class="attribute-name"&gt;modalElement&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Modal&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;yield&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;in-element&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in my app, I can invoke my &lt;code&gt;Modal&lt;/code&gt; component as deep into the hierarchy as I
want, and the content will be rendered into the root modal element:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;td colspan="2"&gt;template.hbs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt; &lt;span class="attribute-name"&gt;hasErrors&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;Modal&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You dun goofed:&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;errors&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt; &lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="attribute-name"&gt;error&lt;/span&gt;&lt;span class="error"&gt;|&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;error&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/Modal&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;if&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_binary-templates'&gt;Binary Templates&lt;/h3&gt;
&lt;p&gt;It&amp;#39;s crucial that web apps render instantly, or else users go elsewhere. When it
comes to improving web performance, one of the most frequent recommendations
you&amp;#39;ll hear is to minimize the amount of total JavaScript in your app.&lt;/p&gt;

&lt;p&gt;There are two reasons for this: not only does more JavaScript take longer to
download, just &lt;em&gt;parsing&lt;/em&gt; the JavaScript can become a noticeable bottleneck on
underpowered devices.&lt;/p&gt;

&lt;p&gt;Complicating the advice to &amp;quot;use less JavaScript&amp;quot; is the fact that most modern
JavaScript libraries, including Angular, React, Vue and Svelte, compile
component templates (or JSX) to JavaScript, which gets embedded in application
code. Without aggressive hand optimization, more templates means more
JavaScript.&lt;/p&gt;

&lt;p&gt;Ember used to do the same thing, compiling Handlebars templates into JavaScript
code that would first create and then update a component&amp;#39;s DOM tree.&lt;/p&gt;

&lt;p&gt;With Glimmer, however, we took a different approach. Instead of generating
JavaScript, today we compile templates into a JSON data structure of &amp;quot;opcodes,&amp;quot;
or rendering instructions. A small runtime evaluates these opcodes, translating
them into DOM creation, DOM updates, invocation of component hooks, etc.&lt;/p&gt;

&lt;p&gt;Not only is &lt;a href="https://jsperf.com/json-parse-vs-eval-corrected/1"&gt;a JSON parser much faster than a full-blown JavaScript
parser&lt;/a&gt;, aggressively sharing
code in the Glimmer VM generates less on-device memory pressure and allows
JavaScript engines like V8 to more quickly generate JIT-optimized code.&lt;/p&gt;

&lt;p&gt;Best of all, our compact JSON format is significantly smaller than the
equivalent compiled JavaScript. We received many reports of apps dropping 30-50%
in total (post-gzip!) size after upgrading to Ember 2.10, the first version to
use this JSON-based approach.&lt;/p&gt;

&lt;p&gt;As exciting as this was, we knew that JSON was not the final word in compactly
and efficiently representing compiled templates.&lt;/p&gt;

&lt;p&gt;At runtime, the Glimmer VM today gathers the JSON for each template and compiles
them into a final, internal representation that is just a large array of 32-bit
integers. After looking at traces of real-world Glimmer.js apps, we knew we
could improve boot times by precomputing this final compilation step at build
time.&lt;/p&gt;

&lt;p&gt;Helpfully, browsers have become increasingly fluent at dealing with binary data,
largely driven by demanding multimedia use cases like audio, video, and 3D
graphics. And while JSON is fast to parse, as the old saw goes, no parse is faster
than &lt;em&gt;no&lt;/em&gt; parse. What if we could serialize compiled templates into a binary format
that the VM could start executing &lt;em&gt;without a parse step&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m no M. Night Shyamalan, so you&amp;#39;ve probably already guessed the ending here:
that&amp;#39;s exactly what we&amp;#39;ve done. Recent versions of Glimmer VM include the
&lt;code&gt;@glimmer/bundle-compiler&lt;/code&gt; package, our name for the compiler that produces a
binary &amp;quot;bundle&amp;quot; of all of your compiled templates.&lt;/p&gt;

&lt;p&gt;We are planning to land support for binary templates as an opt-in in Glimmer.js
soon. (The feature is already landed in the low-level Glimmer VM but is not yet
exposed in a convenient way.)&lt;/p&gt;

&lt;p&gt;One thing to note about the bundle compiler is that it requires knowing your
entire program statically at build time. The browser tends to be a pretty
dynamic environment, however, so Glimmer VM still supports &amp;quot;lazy compilation&amp;quot;
(i.e. compiling to JSON) as a first-class mode.&lt;/p&gt;

&lt;p&gt;In the Ember ecosystem, apps and addons do very dynamic things (like register
components at runtime) which are incompatible with the bundle compiler. We want
to enable binary templates in Ember, but this is farther out because we will
need to figure out exactly what the constraints are and provide guidance for
app and addon authors.&lt;/p&gt;

&lt;p&gt;In exchange for the (admittedly pretty incredible) performance benefits, binary
templates also introduce extra complexity.&lt;/p&gt;

&lt;p&gt;Binary templates can&amp;#39;t be inlined in HTML or JavaScript, so they must be fetched
as early as possible in the page lifecycle. No browser I tested yet supports
&lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot; as=&amp;quot;fetch&amp;quot;&amp;gt;&lt;/code&gt;, which would allow a streaming HTML parser to
detect and fetch binary data very early in the page load. No tools or CDNs know
what the heck a &lt;code&gt;.gbx&lt;/code&gt; file is (the file extension of compiled binaries), and
require manual configuration. You probably want H2 Push for this, but that&amp;#39;s
its own can of worms.&lt;/p&gt;

&lt;p&gt;Getting these optimally deployed will probably be painful for a while, but I have
faith that the Ember community will do what it does best and rally around a set
of shared, high quality solutions for dealing with this.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re curious about the details of how binary templates work, don&amp;#39;t miss
Chad&amp;#39;s &lt;a href="https://www.linkedin.com/pulse/glimmers-optimizing-compiler-chad-hietala/"&gt;recent post about the optimizing
compiler&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_server-side-rendering'&gt;Server-Side Rendering&lt;/h3&gt;
&lt;p&gt;Server-side rendering, or SSR, is a technique for rendering your components on
the server. It allows you to send meaningful HTML to a user&amp;#39;s browser so that
they see something other than an empty white rectangle before your JavaScript
finishes loading.&lt;/p&gt;

&lt;p&gt;Ember supports SSR through &lt;a href="https://ember-fastboot.com/"&gt;FastBoot&lt;/a&gt;, and Glimmer
VM is Ember&amp;#39;s rendering engine, so you can probably guess that Glimmer already
has support for SSR, too.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s true, but there are two shortcomings we want to address:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running Glimmer.js apps in SSR mode is not as easy as it should be.&lt;/li&gt;
&lt;li&gt;Today we take a performance hit because of how we serialize to HTML.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To address the first problem, we are going to make SSR a first-class API and
document exactly how you go from writing a Glimmer.js app to connecting it to a
Node HTTP server.&lt;/p&gt;

&lt;p&gt;Second, after looking at profiles of our app running in SSR mode, we noticed
that there is some low-hanging fruit to pick in how we generate HTML.&lt;/p&gt;

&lt;p&gt;Glimmer is able to run in Node because, internally, we use an abstraction for building
and modifying the DOM. Instead of calling &lt;code&gt;document.createElement(tagName)&lt;/code&gt; directly, for
example, an opcode might instead call &lt;code&gt;this.dom.createElement(tagName)&lt;/code&gt;, going through a DOM
construction helper.&lt;/p&gt;

&lt;p&gt;In the browser, this just proxies to &lt;code&gt;document.createElement&lt;/code&gt;, but in Node, we
instead use &lt;a href="https://github.com/ember-fastboot/simple-dom"&gt;simple-dom&lt;/a&gt;, a
lightweight implementation of a small subset of the DOM API—a &amp;quot;virtual DOM,&amp;quot; if
you will. Once rendering is complete, we use simple-dom&amp;#39;s built-in serializer to convert
the DOM tree to HTML and send it over the wire.&lt;/p&gt;

&lt;p&gt;This approach has the huge advantage of keeping the DOM mutable, just like in
the browser. Particularly with FastBoot, where we wanted existing Ember apps to
be able to adopt SSR, this was an important compatibility feature.&lt;/p&gt;

&lt;p&gt;The downside to preserving mutability is that it introduces a performance
double-whammy.&lt;/p&gt;

&lt;p&gt;HTML is immutable, in the sense that once I write &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, there&amp;#39;s nothing I can
write later in the file to go back and add an attribute to that element. If the
DOM is mutable, then we have to wait for the entire document to settle before we
can serialize to HTML and start writing to the HTTP socket.&lt;/p&gt;

&lt;p&gt;This delays the time to first byte (TTFB) by at least the time it takes to
render the entire page, even though many of the components may have finished
rendering hundreds of milliseconds previously.&lt;/p&gt;

&lt;p&gt;The other performance hit is that we now have two (often large) trees to
traverse: first we walk the tree of components in the initial render, and then
we have to walk DOM tree during HTML serialization. This is predominantly a CPU
cost, but allocating all of these temporary &amp;quot;virtual DOM&amp;quot; nodes doesn&amp;#39;t help
memory costs, either.&lt;/p&gt;

&lt;p&gt;Chad has been doing some experiments with implementing a version of our DOM
abstraction that writes HTML directly to a stream. This solves both of the
above-mentioned performance pitfalls nicely.&lt;/p&gt;

&lt;p&gt;By writing directly to the stream, the host Node environment can start flushing
bytes to the browser immediately in a background thread. And by writing strings
directly to the stream buffer, we can avoid allocating intermediate data
structures entirely.&lt;/p&gt;

&lt;p&gt;For this to work, we have to introduce two requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components can only render once on the server, so any data fetching needs to
happen &lt;em&gt;before&lt;/em&gt; the initial render starts.&lt;/li&gt;
&lt;li&gt;Internally, we need to order opcodes to align with HTML; that is, we need to
ensure that we always create an element and set its attributes before
attempting to append any child nodes. (Luckily for us, it happened to work
this way already.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are hoping to test this approach in a real app in the next few weeks and
report back on the results. We are tentatively optimistic that this will result
in significant performance improvements, and suspect it may outperform even the
best SSR implementations of Virtual DOM-based libraries like React and Preact
because it requires fewer allocations.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_rehydration'&gt;Rehydration&lt;/h3&gt;
&lt;p&gt;Rehydration is the ability of a client-side JavaScript app to &amp;quot;reconnect&amp;quot;
components to the DOM generated by server-side rendered HTML. In many ways, a
robust rehydration implementation is the holy grail that reunites the
progressive enhancement and &amp;quot;all JavaScript all the time&amp;quot; camps.&lt;/p&gt;

&lt;p&gt;The server can serve up meaningful HTML, viewable even when JavaScript isn&amp;#39;t
available, and that HTML gets &amp;quot;progressively enhanced&amp;quot; with interactivity once
the JavaScript loads and components rehydrate. But because components can &lt;em&gt;also&lt;/em&gt;
still produce their own DOM, you retain all of the benefits of client-side
JavaScript, including the ability to work offline.&lt;/p&gt;

&lt;p&gt;Glimmer supports rehydration natively via its &lt;a href="https://github.com/glimmerjs/glimmer-vm/blob/72a1483/packages/@glimmer/runtime/lib/vm/element-builder.ts"&gt;ElementBuilder&lt;/a&gt; abstraction.
In SSR mode, you can enable the &lt;a href="https://github.com/glimmerjs/glimmer-vm/blob/72a1483/packages/%40glimmer/node/lib/serialize-builder.ts"&gt;SerializeBuilder&lt;/a&gt;, which includes additional
comment annotations for where dynamic sections start and end.&lt;/p&gt;

&lt;p&gt;For example, given this template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;user.name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The serialized output would include comments indicating the dynamic portion:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="comment"&gt;&amp;lt;!--%+block:0%--&amp;gt;&lt;/span&gt;Chad Hietala&lt;span class="comment"&gt;&amp;lt;!--%-block:0%--&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the browser, Glimmer is configured to use the
&lt;a href="https://github.com/glimmerjs/glimmer-vm/blob/72a1483/packages/%40glimmer/runtime/lib/vm/rehydrate-builder.ts#L20"&gt;RehydrateBuilder&lt;/a&gt;. The RehydrateBuilder treats the existing
DOM as a stack, and as the VM requests new elements get created, it compares the
top of the &amp;quot;DOM stack&amp;quot; to the requested element. If it matches, the element is
reused and the DOM is not mutated at all. In the case of a mismatch, the
current block is cleared and the appropriate element is created and put in
its place. The comment annotations are also stripped during this process, so you
see a pristine DOM in your developer tools.&lt;/p&gt;

&lt;p&gt;We have rehydration working in our app, and we consider it to be a first-class
part of the Glimmer SSR story.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_incremental-rendering'&gt;Incremental Rendering&lt;/h3&gt;
&lt;p&gt;The thing about low-end mobile devices is that no matter how much you optimize,
performing the initial render of most modern web applications is going to be
slow. While it&amp;#39;s important to chase the fastest raw performance possible (and we
certainly have with Glimmer!), on some devices it&amp;#39;s just unavoidable to have
initial renders that take 500ms to over a second.&lt;/p&gt;

&lt;p&gt;This produces a terrible user experience because it blocks the main thread. If
the user happens to be scrolling, their scroll suddenly starts to stutter.
Videos and animated GIFs freeze, the browser stops updating the layout, and
everything generally feels &amp;quot;janky.&amp;quot;&lt;/p&gt;

&lt;p&gt;The problem is that, by dominating the main thread for so long, we&amp;#39;re not being
good citizens of the web. The CPU is a shared resource, and we&amp;#39;re hogging it all
for ourselves for a huge chunk of time.&lt;/p&gt;

&lt;p&gt;But what if we had a way to render a few components at a time, periodically
giving control back to the browser so it could handle scrolling, painting, etc.?&lt;/p&gt;

&lt;p&gt;Glimmer&amp;#39;s architecture is actually &lt;em&gt;perfectly&lt;/em&gt; suited for this, because at the
end of the day it&amp;#39;s just executing a linear sequence of operations. We can
execute each opcode, one by one, and pause execution if it starts taking too
long.&lt;/p&gt;

&lt;p&gt;Best of all, because normal rendering and rehydration go through nearly
identical code paths, this technique applies whether you&amp;#39;re creating fresh DOM
or just rehydrating DOM created from server-rendered HTML.&lt;/p&gt;

&lt;p&gt;Incremental rehydration feels &lt;em&gt;amazing&lt;/em&gt;, even on low-end devices on slow
networks. The server sends complete HTML, which the browser can incrementally
parse and render, even before CSS and JavaScript have started loading. Once the
JavaScript does finish loading, it can rehydrate arbitrarily complex DOM while
maintaining 60fps scrolling, never taking more than ~16ms before returning
execution to the browser.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback"&gt;&lt;code&gt;requestIdleCallback&lt;/code&gt;&lt;/a&gt; in our app to drive rehydration, which
provides a &amp;quot;deadline&amp;quot; describing how much time we have to do work before causing
user-noticeable jank. We execute opcodes until we hit the deadline, then
schedule the VM to resume in another idle callback if there are additional
operations to execute. For browsers without &lt;code&gt;requestIdleCallback&lt;/code&gt;, we can fall
back to &lt;code&gt;setTimeout&lt;/code&gt; and approximate deadlines.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_wrapping-up'&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Except where noted, everything I&amp;#39;ve described above is available in raw,
low-level form in Glimmer VM today. We will be releasing a new version of
Glimmer.js imminently that includes the updated VM, including the change to
&lt;code&gt;&amp;lt;Capital /&amp;gt;&lt;/code&gt; components, fragment templates, etc.&lt;/p&gt;

&lt;p&gt;Once that&amp;#39;s done, our next task will be to make enabling binary templates, SSR,
rehydration, etc. as easy as possible.&lt;/p&gt;

&lt;p&gt;We are also actively working on making Glimmer components available in Ember apps
via an addon, as well as updating Ember to use the latest version of Glimmer VM.
Once that lands, it should unlock the ability to use rehydration in FastBoot.&lt;/p&gt;

&lt;p&gt;I hope this overview has got you as excited as I am. Glimmer&amp;#39;s VM architecture
has been the gift that keeps on giving, and I&amp;#39;ve been surprised by how
relatively easy implementing the above features has been on top of the core
architecture.&lt;/p&gt;

&lt;p&gt;Best of all, I don&amp;#39;t think we&amp;#39;ve yet hit the end of the possibilities that
Glimmer unlocks. In this post, I&amp;#39;ve focused on features that are either done or
close to being done, and haven&amp;#39;t yet mentioned some of the ideas we&amp;#39;re excited
to try, like running Glimmer in a Web Worker, porting the core VM to
WebAssembly, and more. We&amp;#39;ve also been working closely with our browser
implementer friends to see what lessons can be applied to the web platform so
everyone benefits from our experimentation.&lt;/p&gt;

&lt;p&gt;Lastly, I&amp;#39;d like to thank LinkedIn and Tilde for funding a great deal of the
implementation work. Not only is all of this work released under the open source
MIT license, we do all of our work out in the open on GitHub. I invite you to
follow along on the &lt;a href="https://github.com/glimmerjs/glimmer-vm"&gt;Glimmer VM&lt;/a&gt; and &lt;a href="https://github.com/glimmerjs/glimmer.js"&gt;Glimmer.js&lt;/a&gt;
repositories.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading this far, and I can&amp;#39;t wait to get all of this cool
stuff into your hands. We are looking forward to seeing what the community can
build with these powerful primitives. We&amp;#39;ll post again once we&amp;#39;ve released the
next version of Glimmer.js with these features integrated, so stay tuned to the
blog. And if you&amp;#39;ve got any questions or want to help out, leave a comment below
or come see us on GitHub!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Road to Ember 3.0</title>
    <link rel="alternate" href="http://emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html"/>
    <id>http://emberjs.com/blog/2017/10/03/the-road-to-ember-3-0.html</id>
    <published>2017-10-03T00:00:00+00:00</published>
    <updated>2017-10-03T00:00:00+00:00</updated>
    <author>
      <name>Ember</name>
    </author>
    <summary type="html">&lt;p&gt;Today the Ember.js Core Team is happy to announce our plans for the release of Ember 3.0. Ember 3.0 will arrive 2.5 years and 18 minor revisions after the release of Ember 2.0. The final release of the 2.x series will be Ember 2.18 on January 1st,...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Today the Ember.js Core Team is happy to announce our plans for the release of Ember 3.0. Ember 3.0 will arrive 2.5 years and 18 minor revisions after the release of Ember 2.0. The final release of the 2.x series will be Ember 2.18 on January 1st, 2018.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember 3.0 removes public API deprecated in Ember 2.x releases.&lt;/strong&gt; 3.0 does not introduce new public APIs or breaking changes.&lt;/p&gt;

&lt;p&gt;Traditionally, major releases of software are centered around marketing pitches and new functionality. In contrast, major releases of Ember are “garbage collection” releases. Ember APIs that were deprecated during 2.x but were still supported are purged from the codebase in 3.0. The APIs remaining in 3.0 reflect what we think of as the idiomatic way to build an Ember app.&lt;/p&gt;

&lt;p&gt;Ember 2.0 was the project’s first attempt at a major release where the transition path for apps and addons was a priority. The community took several important lessons from the 2.0 release cycle, and these have shaped our plans for 3.0. Please take a moment to review our plans below.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_the-ember-3-0-release-schedule'&gt;The Ember 3.0 release schedule&lt;/h2&gt;
&lt;p&gt;We’re announcing this release several months ahead of its final date so application authors and addons will have time to prepare for the transition. The specific schedule of releases leading to 3.0 will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2017-10/ember-3-timeline.jpg" alt="Ember 3.0 release schedule"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2.16.0 stable released: October 9th 2017&lt;/li&gt;
&lt;li&gt;2.17.0 stable released, 2.16 promoted LTS: November 20th 2017&lt;/li&gt;
&lt;li&gt;2.18.0 stable released, 3.0-beta released: January 1st 2018&lt;/li&gt;
&lt;li&gt;3.0.0 stable released, 2.18 promoted to LTS: February 12th 2018&lt;/li&gt;
&lt;li&gt;3.4.0 stable released: July 30th 2018&lt;/li&gt;
&lt;li&gt;3.5.0 stable release, 3.4 promoted to LTS: September 10th 2018&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above dates are projections based on our 6-week release cycle. This schedule has two notable departures from our standard release policies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember 2.18 will be made an additional LTS to maximize the opportunity for apps to transition to 3.x.&lt;/li&gt;
&lt;li&gt;Ember 3.4, and not 3.0, will be the first 3.x release promoted to an LTS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ember 2.18-LTS, the final release of Ember 2.x, will receive support for critical bugfixes until September 2018 and security fixes until February 2019. This is in alignment with our standard long-term support practices.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_transitioning-to-3-0'&gt;Transitioning to 3.0&lt;/h2&gt;
&lt;p&gt;We’ve refined the release plan for Ember 3.0 based on the lessons of 2.0. The most important of those lessons is that there should be no last-minute deprecations during transition releases, and no intimate (unintentionally in common use) or private API churn around the transition.&lt;/p&gt;

&lt;p&gt;To turn that lesson into practice, we’ve carefully tracked the addition of 3.0-targeted deprecations for each part of the framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The last 3.0-targeted deprecation to Ember was in July 2017, Ember 2.14&lt;/li&gt;
&lt;li&gt;The last 3.0-targeted deprecation to Ember Data was in April 2017, Ember 2.13&lt;/li&gt;
&lt;li&gt;The last 3.0-targeted deprecation to Ember CLI was in April 2017, Ember 2.13&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;No additional 3.0-targeted deprecations will be introduced.&lt;/strong&gt; This will prevent a last-minute rush to plan API changes for 3.0, and ensure that application authors behind on deprecation fixes don’t fall further behind than they already are. The single exception here is that we will add a deprecation message in development builds for IE9, IE10, and PhantomJS.&lt;/p&gt;

&lt;p&gt;To further expand the migration window for 2.x applications to adopt 3.x, &lt;strong&gt;we will be releasing an addon that provides support for Ember.js 2.x APIs into the 3.x series.&lt;/strong&gt; We’re committing to support that addon until Ember 3.4 (the first LTS candidate of the Ember 3.x cycle). If you want to contribute to this effort, you can find this package under the name &lt;code&gt;ember-2-legacy&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_api-removals-in-3-0'&gt;API Removals in 3.0&lt;/h2&gt;
&lt;p&gt;All APIs to be removed in Ember 3.0 are already deprecated today. By removing support for these features we achieve two goals for our major release. First, we make it simpler for Ember to strip code that supports these features if you don’t use them. Second, we make it possible for Ember to remove the code supporting these features entirely, opening the door to refactoring that improves the clarity and simplicity of our implementations.&lt;/p&gt;

&lt;p&gt;The APIs removed in each of Ember.js, Ember Data, and Ember CLI are:&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_apis-removed-in-ember-js-3-0'&gt;APIs Removed in Ember.js 3.0&lt;/h3&gt;
&lt;p&gt;Below we’ve listed some of the most significant API removals in Ember.js 3.0. For an exhaustive list of removals, see the &lt;a href="/deprecations/v2.x/"&gt;Ember.js 2.x deprecation guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-registry-and-container-access'&gt;Legacy registry and container access.&lt;/h4&gt;
&lt;p&gt;A large undertaking of the 2.x cycle was to improve Ember’s boot process, enabling features like &lt;a href="https://ember-fastboot.com/"&gt;Ember Fastboot&lt;/a&gt; and improving the performance of Ember’s dependency injection system.&lt;/p&gt;

&lt;p&gt;In Ember 2.0 there was still no public API for registering dependencies or interacting with the DI container. Instead, you would often see code that referenced the &lt;code&gt;registry&lt;/code&gt; or &lt;code&gt;container&lt;/code&gt; properties on application objects or other objects instantiated by the framework. In Ember 3.0 these legacy systems will be removed in favor of APIs on the application object, application instance object, and the “owner” API.&lt;/p&gt;

&lt;p&gt;For more details, please see the deprecation guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_initializer-arity"&gt;Initializer arity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_ember-application-registry-ember-applicationinstance-registry"&gt;&lt;code&gt;Ember.Application#registry&lt;/code&gt; / &lt;code&gt;Ember.ApplicationInstance#registry&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_ember-applicationinstance-container"&gt;&lt;code&gt;Ember.ApplicationInstance#container&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_injected-container-access"&gt;Injected &lt;code&gt;container&lt;/code&gt; access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_migrating-from-_lookupfactory-to-factoryfor"&gt;Migrating from &lt;code&gt;_lookupFactory&lt;/code&gt; to &lt;code&gt;factoryFor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-deprecate-api'&gt;Legacy deprecate API&lt;/h4&gt;
&lt;p&gt;Ember’s deprecation APIs improved in 2.0. The goal was to provided more information to tools like &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; and the &lt;a href="https://github.com/emberjs/ember-inspector"&gt;Ember inspector&lt;/a&gt;. All calls to a deprecation API must now include an &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; parameter. This permits them to be filtered by tooling. In the 3.x series we plan to use this improved data to implement “svelte” builds of Ember, where deprecated but unused code paths in the framework are removed during an application build.&lt;/p&gt;

&lt;p&gt;For more details, see the deprecation guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_function-as-test-in-ember-deprecate-ember-warn-ember-assert"&gt;Function as test in &lt;code&gt;Ember.deprecate&lt;/code&gt;, &lt;code&gt;Ember.warn&lt;/code&gt;, &lt;code&gt;Ember.assert&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_ember-debug-function-options"&gt;Ember debug function options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-data-binding-api'&gt;Legacy data binding API&lt;/h4&gt;
&lt;p&gt;For a long time, Ember has provided two systems for applications to perform data-binding in JavaScript. The first uses computed properties and it is still idiomatic today. For example, you’ll often see &lt;code&gt;Ember.computed.alias&lt;/code&gt; in application code. This system remains without any deprecation.&lt;/p&gt;

&lt;p&gt;The second system uses the &lt;code&gt;Ember.Binding&lt;/code&gt; namespace or any property with the postfix of &lt;code&gt;Binding&lt;/code&gt; on an object. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="key"&gt;wowBinding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;MyApp.wowObject&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;thingContainer&lt;/span&gt;: {},
  &lt;span class="key"&gt;amazingBinding&lt;/span&gt;: Ember.Binding.oneWay(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;thingContainer.firstAmazingThing&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;wasThisReallyTheAPIBinding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;thingContainer.yesThisWasTheAPI&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This second system will be removed in Ember 3.0. For more details, see the deprecation guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_ember-binding"&gt;&lt;code&gt;Ember.Binding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-render-helper'&gt;Legacy {{render}} helper&lt;/h4&gt;
&lt;p&gt;Ember’s &lt;code&gt;{{render}}&lt;/code&gt; helper presaged the idea of component-driven rendering architecture as we now know it. Despite this, it was also an API coupled to Ember’s &lt;code&gt;Controller&lt;/code&gt; system, was subject to edge cases where the context of a template was difficult to discern, and additionally was entangled with Ember’s routing system. Through the 2.x cycle we’ve worked to ensure each use-case for &lt;code&gt;{{render}}&lt;/code&gt; has a viable solution in Ember’s component-driven system.&lt;/p&gt;

&lt;p&gt;Fully deprecated since Ember 2.11, in 3.0 the &lt;code&gt;{{render}}&lt;/code&gt; helper will be removed. Please see the deprecation guide for more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_render-helper-with-block"&gt;&lt;code&gt;{{#render}}&lt;/code&gt; helper with a block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_model-param-in-code-render-code-helper"&gt;Model param in &lt;code&gt;{{render}}&lt;/code&gt; helper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_code-render-code-helper"&gt;&lt;code&gt;{{render}}&lt;/code&gt; helper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_rendering-into-a-render-helper-that-resolves-to-an-outlet"&gt;Rendering into a &lt;code&gt;{{render}}&lt;/code&gt; helper that resolves to an &lt;code&gt;{{outlet}}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-ember-k-utility'&gt;Legacy Ember.K utility&lt;/h4&gt;
&lt;p&gt;Ember has historically provided a short-to-type noop function for use as a stub on parent classes or in other situations where a noop might be useful. With the advent of ECMAScript 2015 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions"&gt;method definitions&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow functions&lt;/a&gt;, this kind of utility has become more confusing than convenient.&lt;/p&gt;

&lt;p&gt;In Ember 3.0 the &lt;code&gt;Ember.K&lt;/code&gt; function will be removed. For more details, please see the deprecation guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/v2.x/#toc_code-ember-k-code"&gt;&lt;code&gt;Ember.K&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_consuming-ember-through-bower'&gt;Consuming Ember through Bower&lt;/h4&gt;
&lt;p&gt;Ember.js 3.0 and later releases will no longer be published to bower. If you still use bower today, we strongly suggest you begin the migration of your dependencies to npm.&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_apis-removed-in-ember-data-3-0'&gt;APIs Removed in Ember Data 3.0&lt;/h3&gt;
&lt;p&gt;Below we’ve listed the most notable Ember Data API removals in 3.0. For an exhaustive list see the &lt;a href="/deprecations/ember-data/v2.x/"&gt;Ember&lt;/a&gt; &lt;a href="/deprecations/ember-data/v2.x/"&gt;&lt;/a&gt;&lt;a href="/deprecations/ember-data/v2.x/"&gt;Data 2.x deprecation guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_using-ember-data-via-globals'&gt;Using Ember-Data via globals&lt;/h4&gt;
&lt;p&gt;Ember Data deprecated access to &lt;code&gt;window.DS&lt;/code&gt; early in 2.x. Instead, accessing the &lt;code&gt;DS&lt;/code&gt; namespace object via ES modules is preferred. In general this makes Ember Data more like other addons in the Ember ecosystem.&lt;/p&gt;

&lt;p&gt;To access Ember Data in applications we suggest importing the &lt;code&gt;DS&lt;/code&gt; namespace. For example:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Additionally, Ember Data 3.0 and later releases will no longer be published to bower. If you still use bower today, we strongly suggest you begin the migration of your dependencies to npm.&lt;/p&gt;

&lt;p&gt;Please see the deprecation guide for some additional information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/ember-data/v2.x/#toc_global-version-of-ds"&gt;Global version of&lt;/a&gt; &lt;a href="/deprecations/ember-data/v2.x/#toc_global-version-of-ds"&gt;&lt;code&gt;DS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_date-parse'&gt;Date.parse&lt;/h4&gt;
&lt;p&gt;In some legacy browsers, &lt;code&gt;Date.parse&lt;/code&gt; does not support the ISO8601 standard date format. Ember Data provided a polyfill to make &lt;code&gt;Date.parse&lt;/code&gt; consistent across environments.&lt;/p&gt;

&lt;p&gt;During the 2.x cycle, none of these legacy browsers were supported. Despite this, Ember Data continued to replace &lt;code&gt;Date.parse&lt;/code&gt; with its own polyfill. Partway through the 2.x cycle, Ember Data introduced the ability to opt-out of this polyfill and that change was made default for new Ember applications.&lt;/p&gt;

&lt;p&gt;In Ember Data 3.0 the opt-out functionality will become a noop and the native &lt;code&gt;Date.parse&lt;/code&gt; functionality will always be used. Additionally, the deprecated API &lt;code&gt;Ember.Date.parse&lt;/code&gt; will be removed.&lt;/p&gt;

&lt;p&gt;For more details see the deprecation guides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/ember-data/v2.x/#toc_ember-date-parse"&gt;&lt;code&gt;Ember.Date.parse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/deprecations/ember-data/v2.x/#toc_date-prototype-extension"&gt;Date prototype extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_relocated-apis'&gt;Relocated APIs&lt;/h4&gt;
&lt;p&gt;Several APIs have effectively been relocated in Ember Data during the 2.x series. In some cases these changes reflected the promotion of a private API to a public one, in other cases a subtle adjustment to the development model.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;store.hasRecordForId&lt;/code&gt; was introduced to replace &lt;code&gt;store.recordIsLoaded&lt;/code&gt; (&lt;a href="/deprecations/ember-data/v2.x/#toc_recordisloaded"&gt;deprecation guide&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.adapterFor&lt;/code&gt; was introduced to replace &lt;code&gt;store.lookupAdapter&lt;/code&gt; (&lt;a href="/deprecations/ember-data/v2.x/#toc_lookupadapter"&gt;deprecation guide&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.serializerFor&lt;/code&gt; was introduced to replace &lt;code&gt;store.lookupSerializer&lt;/code&gt; (&lt;a href="/deprecations/ember-data/v2.x/#toc_lookupserializer"&gt;deprecation guide&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model.serialize&lt;/code&gt; was introduced to replace &lt;code&gt;store.serialize&lt;/code&gt; (&lt;a href="/deprecations/ember-data/v2.x/#toc_store-serialize"&gt;deprecation guide&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_unused-initializers'&gt;Unused initializers&lt;/h4&gt;
&lt;p&gt;Ember Data provided several initializers which have been consolidated into a single &lt;code&gt;ember-data&lt;/code&gt; initializer. In 3.0, support for the legacy initializers (and for ordering other initializers based on their names) will be removed.&lt;/p&gt;

&lt;p&gt;Please see the deprecation guide for more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/ember-data/v2.x/#toc_unused-initializers"&gt;Unused Initializers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_apis-removed-in-ember-cli-3-0'&gt;APIs Removed in Ember CLI 3.0&lt;/h3&gt;
&lt;p&gt;Here we’ve listed the most notable Ember CLI API removals in 3.0. For an exhaustive list see the &lt;a href="/deprecations/ember-cli/v2.x/"&gt;Ember-CLI 2.x deprecation guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_base-url-configuration'&gt;Base URL configuration&lt;/h4&gt;
&lt;p&gt;Ember CLI applications used to look for a &lt;code&gt;baseURL&lt;/code&gt; property in an application’s &lt;code&gt;config/environment.js&lt;/code&gt;. This value would be used to populated a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag in the application’s &lt;code&gt;index.html&lt;/code&gt;. This option provided a way to run an Ember app from a URL subdirectory without rewriting asset URLs.&lt;/p&gt;

&lt;p&gt;Unfortunately the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag strategy was fatally flawed. Amongst other issues discussed in the &lt;a href="/blog/2016/04/28/baseURL.html"&gt;&lt;code&gt;baseURL&lt;/code&gt;&lt;/a&gt; &lt;a href="/blog/2016/04/28/baseURL.html"&gt;deprecation blog post,&lt;/a&gt; SVG fragments on a page with a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag have poor support in several browsers. This problem, and others, lead to the &lt;code&gt;baseURL&lt;/code&gt; option being deprecated in favor of more robust support and documentation of the &lt;code&gt;rootURL&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;In Ember CLI 3.0, support for base URL configuration will be removed. For more details on how to migrate away from &lt;code&gt;baseURL&lt;/code&gt;, see these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog post: &lt;a href="/blog/2016/04/28/baseURL.html"&gt;Upcoming deprecation of baseURL in Ember CLI 2.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deprecation guide: &lt;a href="/deprecations/ember-cli/v2.x/#toc_base-url"&gt;Base URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class='anchorable-toc' id='toc_legacy-brocfile-js'&gt;Legacy Brocfile.js&lt;/h4&gt;
&lt;p&gt;Ember CLI builds were originally configured in the file &lt;code&gt;Brocfile.js&lt;/code&gt;. Early in the 2.x series use of this file was deprecated in favor of &lt;code&gt;ember-cli-build.js&lt;/code&gt;. This new file allowed Ember CLI to pass default configuration to application builds and decoupled Ember CLI from Broccoli’s own configuration system.&lt;/p&gt;

&lt;p&gt;In Ember 3.0, support for &lt;code&gt;Brocfile.js&lt;/code&gt; will be removed. Please see the deprecation guide for more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/deprecations/ember-cli/v2.x/#toc_migrate-from-brocfile-js-to-ember-cli-build-js"&gt;Migrate from &lt;code&gt;Brocfile.js&lt;/code&gt; to &lt;code&gt;ember-cli-build.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_browser-support-in-3-0'&gt;Browser Support in 3.0&lt;/h2&gt;
&lt;p&gt;Ember 3.0 will drop support for Internet Explorer 9, IE 10, and PhantomJS. If you still require support for these browsers, Ember 2.18-LTS will maintain support for significant bug fixes until September 2018 and security fixes until February 2019. We encourage you to use this window of time to plan a transition for your users if you intend to upgrade to Ember 3.x.&lt;/p&gt;

&lt;p&gt;Microsoft ended support for IE 9 (including security fixes) &lt;a href="http://www.allyncs.com/docs/lifecyclesupport.html"&gt;in April of 2017&lt;/a&gt;. IE 10 has global usage &lt;em&gt;below&lt;/em&gt; that of IE9, partially because all operating systems running IE10 can support an upgrade to IE11 or another browser. Amongst Ember developers in the &lt;a href="/ember-community-survey-2017/#browser-requirements"&gt;2017 Ember Community Survey&lt;/a&gt; only 2.9% expect to work on application supporting IE9 this spring. Providing a great web experience is difficult on these browsers, and supporting them makes it difficult for us to leverage modern JavaScript and web APIs.&lt;/p&gt;

&lt;p&gt;Although there is still limited activity on its GitHub repo, PhantomJS is effectively unmaintained &lt;a href="https://groups.google.com/forum/#!topic/phantomjs/9aI5d-LDuNE"&gt;as of April 2017&lt;/a&gt;. In its place, Ember and other projects have started to use &lt;a href="https://developers.google.com/web/updates/2017/04/headless-chrome"&gt;headless Chrome&lt;/a&gt; for continuous integration and other use cases. If you have not already, we encourage you to migrate your own continuous integration systems to headless Chrome.&lt;/p&gt;

&lt;p&gt;This decision to drop support for IE9, IE10, and PhantomJS is pending completion of a final comment period on &lt;a href="https://github.com/emberjs/rfcs/pull/252"&gt;RFC 252: Browser Support Changes&lt;/a&gt;. For more details, please see that RFC.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_onward-to-3-x'&gt;Onward to 3.x&lt;/h2&gt;
&lt;p&gt;Ember 3.x presents us an opportunity to do more than simply remove code. We’re excited to take the conventions Ember developers are building with and continue to streamline the framework around them.&lt;/p&gt;

&lt;p&gt;Around the release of Ember 2.0 there were several features we ambitiously hoped to land during the 2.x cycle. We&amp;#39;re not planning to rush these features in at the last minute.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Routable components&lt;/strong&gt; were pitched as a way to remove controllers from Ember applications. Controllers are problematic for two reasons: They are singletons instances, which is often unexpected by developers, and they are a unique concept applied to a specific scenario in application architecture, making them difficult for new developers to learn. Despite these issues, removing controllers remains a challenging design problem that hinges on component API design (should we use today’s components or block on Glimmer components?) as well as query params and routing. We’ve removed most or all of the worst footguns around controllers during the 2.x cycle, and encourage you to use them without hesitation until we complete a migration path to something better.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Svelte builds&lt;/strong&gt; are a system we’ve discussed for some time. The general pattern is to ship less code to the browser, especially when that code is related to framework features that an application does not use. Migrating Ember itself to be distributed as an Ember CLI addon was the most complex step in the process of bringing svelte to applications. We’re happy to have that hurdle down and Robert Jackson is looking at our next steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please visit our new &lt;a href="/statusboard"&gt;Ember Status board&lt;/a&gt; to keep up with what we’re working on. Ember&amp;#39;s 3.0 release is focused on removing legacy features, but that doesn&amp;#39;t mean we&amp;#39;re not working hard in other areas of the framework to deliver on improvement. &lt;strong&gt;In fact, work on improvements to Ember has been effectively decoupled from the 3.x release, and we expect to see new features landing throughout the transition period.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a demonstration, here are some examples of new functionality we&amp;#39;ve
recently added to Ember without adding 3.0-targeted deprecations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The JavaScript modules API for Ember.js&lt;/strong&gt;: In Ember.js 2.16 applications can import parts of Ember without going through a single namespace object. This creates opportunities to improve our documentation, editor tooling, and performance. Additionally in Ember 2.16, newly generated applications will use the new module import statements by default. See the &lt;a href="/blog/2017/09/01/ember-2-15-released.html#toc_ember-js-modules-api"&gt;Ember 2.16-beta release post&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Routing service phase I&lt;/strong&gt;: In Ember.js 2.15 we landed a new service that permits components to interact with the routing system. This service improves the general architecture of Ember apps and creates the opportunity for new kinds of analytics tracking. The first phase of development for the routing service landed in Ember 2.15, with the second phase to follow. See the &lt;a href="/blog/2017/09/01/ember-2-15-released.html#toc_public-router-service-phase-1"&gt;Ember 2.15 release post&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Newer versions of the Glimmer-VM rendering engine&lt;/strong&gt;: In Ember.js 2.15 the framework upgraded its internal dependency on the Glimmer-VM rendering engine. Included were features like Glimmer&amp;#39;s &amp;quot;stack VM&amp;quot;, improved assertion stripping, and an improved implementation of the &lt;code&gt;(component&lt;/code&gt; helper. The Glimmer-VM team is committed to keeping Ember up to date with recent releases. This incremental approach to delivers improvements and optimizations with low risk of a major regression.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We look forward to sharing Ember 3.0-beta on January 1st. Thank you!&lt;/p&gt;
</content>
  </entry>
</feed>
